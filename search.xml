<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Authentication and Authorization for SSO</title>
    <url>/2023/12/20/Authentication-and-Authorization-for-SSO/</url>
    <content><![CDATA[<h2 id="OAuth-2-0-Open-Authorization-2-0"><a href="#OAuth-2-0-Open-Authorization-2-0" class="headerlink" title="OAuth 2.0 (Open Authorization 2.0):"></a>OAuth 2.0 (Open Authorization 2.0):</h2><p>  OAuth 2.0 is an <strong>authorization framework</strong> that allows third-party applications to obtain limited access to a user’s resources on a server without exposing their credentials. It’s commonly used for delegated authorization scenarios, such as allowing a third-party application to access a user’s data on another service (e.g., social media data access).<br>  If the Client is a Single-Page App (SPA), an application running in a browser using a scripting language like JavaScript, there are two grant options:</p>
<ul>
<li>Authorization code (front channel + back channel): safer since the Access Token is not exposed on the client side, and this flow can return Refresh Tokens.</li>
<li>Implicit (front channel only)<a id="more"></a>
<a href="https://auth0.com/docs/get-started/authentication-and-authorization-flow/which-oauth-2-0-flow-should-i-use">Which OAuth 2.0 Flow Should I Use?</a><br><a href="https://www.youtube.com/watch?v=996OiexHze0">OAuth 2.0 and OpenID Connect (in plain English)</a><br><a href="https://stackoverflow.com/questions/59511628/is-it-secure-to-store-a-refresh-token-in-the-database-to-issue-new-access-toke">Is it secure to store a refresh token in the database?</a></li>
</ul>
<h2 id="OpenID-Connect-OIDC"><a href="#OpenID-Connect-OIDC" class="headerlink" title="OpenID Connect (OIDC):"></a>OpenID Connect (OIDC):</h2><p>  OpenID Connect is an <strong>interoperable authentication protocol based on the OAuth 2.0 framework</strong> . It provides a standardized way for clients to obtain information about the end-user in order to authenticate them. OIDC is often used for single sign-on (SSO) scenarios, where a user can log in once and access multiple applications without needing to log in again. OIDC uses JSON Web Tokens (JWT), HTTP flows and avoids sharing user credentials with services.</p>
<p>  What OpenID Connect adds</p>
<ul>
<li><p>ID token(JWT)</p>
</li>
<li><p>UserInfo endpoint for getting more user information</p>
</li>
<li><p>Standard set of scopes</p>
</li>
<li><p>Standardized implementation</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">------------------</span><br><span class="line">| OpenID Connect |  -&gt; OpenID Connect is <span class="keyword">for</span> authentication</span><br><span class="line">------------------</span><br><span class="line">|    OAuth 2.0   |  -&gt; OAuth 2.0 is <span class="keyword">for</span> authorization</span><br><span class="line">------------------</span><br><span class="line">|      HTTP      |</span><br><span class="line">------------------</span><br></pre></td></tr></table></figure>
<p><a href="https://openid.net/developers/how-connect-works/">How OpenID Connect Works - OpenID Foundation</a></p>
<h2 id="JSON-Web-Tokens-JWT"><a href="#JSON-Web-Tokens-JWT" class="headerlink" title="JSON Web Tokens (JWT):"></a>JSON Web Tokens (JWT):</h2><p>JSON Web Tokens (JWT) are <strong>a format for representing claims</strong>, often used in OAuth 2.0 and OIDC as a means of transmitting information securely between parties. In OIDC, the identity token is a JWT.</p>
<p>JWTs consist of three parts:</p>
</li>
<li><p>Header: typically consists of two parts: the type of the token, which is JWT, and the signing algorithm being used, such as HMAC SHA256 or RSA.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>PlayLoad(claims): there are three types of claims: registered(<a href="https://datatracker.ietf.org/doc/html/rfc7519#page-10">reference</a>), public(<a href="https://www.iana.org/assignments/jwt/jwt.xhtml">reference</a>), and private(custom) claims.</p>
</li>
<li><p>Signature: used to verify the message wasn’t changed along the way</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">base64UrlEncode(payload),</span><br><span class="line">secret)</span><br></pre></td></tr></table></figure>

<p>The output is three Base64-URL strings separated by dots.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Base64[Header].Base64[Payload(claims)].Base64[Signature]</span><br></pre></td></tr></table></figure>

<p>usage</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><a href="https://jwt.io/introduction">Introduction to JSON Web Tokens</a></p>
]]></content>
      <categories>
        <category>Authentication, Authorization</category>
      </categories>
      <tags>
        <tag>OAuth 2.0</tag>
        <tag>OpenID</tag>
        <tag>JWT</tag>
        <tag>SSO</tag>
      </tags>
  </entry>
  <entry>
    <title>從零搭建Blog part1： Hexo+GitHub</title>
    <url>/2020/10/09/Blog1/</url>
    <content><![CDATA[<h1 id="從零搭建Blog-part1：-Hexo-GitHub"><a href="#從零搭建Blog-part1：-Hexo-GitHub" class="headerlink" title="從零搭建Blog part1： Hexo+GitHub"></a>從零搭建Blog part1： Hexo+GitHub</h1><blockquote>
<p>Hexo 是一個快速、簡單且強大的網誌框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在幾秒鐘內透過漂亮的主題產生靜態檔案。</p>
</blockquote>
<a id="more"></a>

<h2 id="For-Mac-—-strongly-recommand"><a href="#For-Mac-—-strongly-recommand" class="headerlink" title="# For Mac — strongly recommand"></a># For Mac — strongly recommand</h2><p><a href="https://medium.com/nitas-learning-journey/mac%E7%B5%82%E7%AB%AF%E6%A9%9F-terminal-%E8%A8%AD%E5%AE%9A-iterm2-ba63efd0df6a">Mac終端機 (Terminal)設定： iTerm 2</a> —&gt; change your terminal </p>
<h2 id="安裝-Node-js-git"><a href="#安裝-Node-js-git" class="headerlink" title="# 安裝 Node.js + git"></a># 安裝 Node.js + git</h2><p>Mac –&gt; homebrew</p>
<p>去 <a href="https://nodejs.org/en/">Node.js</a> 官網下載安裝</p>
<ul>
<li><a href="https://nodejs.org/en/">Node.js</a> (Node.js 版本需不低於 8.6，建議使用 Node.js 10.0 及以上版本)</li>
<li><a href="https://git-scm.com/">Git</a></li>
</ul>
<h2 id="github新建一個項目"><a href="#github新建一個項目" class="headerlink" title="# github新建一個項目"></a># github新建一個項目</h2><p>新建一個項目，如下所示：<br><img src="/2020/10/09/Blog1/1.png" width="100%" height="100%" title="1" alt="1"></p>
<p>然後如下圖所示，輸入自己的項目名字，後面一定要加.github.io後綴</p>
<p>===作為Github Page的倉庫，一定要為<code>你Github的用戶名.github.io</code> ===</p>
<img src="/2020/10/09/Blog1/2.png" title="2" alt="2">

<p>然後項目就建成了，點擊Settings，向下拉到最後有個GitHub Pages，點擊————-Choose a theme選擇一個主題。然後等一會兒，再回到GitHub Pages，會變成下面這樣：</p>
<img src="/2020/10/09/Blog1/3.png" title="3" alt="3">

<blockquote>
<p>選擇主題，此時不能訪問，需要選擇一個主題，才可以訪問</p>
</blockquote>
<p>點擊那個鏈接，就會出現自己的網頁</p>
<h2 id="Hexo-–-gt-Blog"><a href="#Hexo-–-gt-Blog" class="headerlink" title="# Hexo –&gt; Blog"></a># Hexo –&gt; Blog</h2><h3 id="創造一個資料夾專門放-Blog-檔案"><a href="#創造一個資料夾專門放-Blog-檔案" class="headerlink" title="# 創造一個資料夾專門放 Blog 檔案"></a># 創造一個資料夾專門放 Blog 檔案</h3><p>創造一個資料夾專門放 Blog 檔案，以下操作都在這資料夾中。</p>
<p>安裝 Hexo Git，Hexo 提供了快速方便的一鍵佈署功能，只需一個指令就能將網站佈署到伺服器上 <a href="https://hexo.io/zh-tw/docs/one-command-deployment.html">佈署</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>接下來透過<code>npm</code>安裝<code>Hexo</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">#or</span><br><span class="line">$ npm i hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>安裝完後輸入<code>hexo -v</code>驗證是否安裝成功。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo version</span><br><span class="line">#or</span><br><span class="line">$ hexo -v</span><br></pre></td></tr></table></figure>

<p>接下來就可以開始初始化部落格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init  # 初始化專門放 Blog 檔案資料夾</span><br><span class="line">$ npm install # 安裝相關套件</span><br></pre></td></tr></table></figure>

<img src="/2020/10/09/Blog1/4.png" title="4" alt="4">

<p><code>_config.yml</code>：網站 <a href="https://hexo.io/zh-tw/docs/configuration">配置</a> 檔案，可以在此配置大部分的設定。<br><code>package.json</code>：套件版本控制<br><code>scaffolds</code>：<a href="https://hexo.io/zh-tw/docs/writing.html#%E9%B7%B9%E6%9E%B6%EF%BC%88Scaffold%EF%BC%89">鷹架</a> 資料夾。建立新文章時，會根據 scaffold 來建立檔案。<br><code>source</code>：原始檔案資料夾是放置內容的地方。<br><code>themes</code>：<a href="https://hexo.io/zh-tw/docs/themes">主題</a> 資料夾。Hexo 會根據主題來產生靜態檔案。</p>
<p>再來到 blog 資料夾下找一個 _config.yml 的檔案，這是 Hexo 的全域配置文件</p>
<p>開啟之後，拉到檔案最底部，可以看到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type:</span><br></pre></td></tr></table></figure>

<p>將以下資訊對應輸入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: http:&#x2F;&#x2F;github.com&#x2F;yourname&#x2F;yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<blockquote>
<p>設定中的 “:” 後一定要有一個空格</p>
<p>將上面的 yourname 改成 GitHub 帳號名稱</p>
</blockquote>
<h3 id="1-localhost"><a href="#1-localhost" class="headerlink" title="# 1. localhost"></a># 1. localhost</h3><p>接著執行下方兩行指令，就可以在 <a href="http://localhost:4000/">http://localhost:4000/</a> 查看Blog 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br><span class="line">#or</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>Ctrl + c –&gt; stop</p>
<h3 id="2-部署上-GitHub"><a href="#2-部署上-GitHub" class="headerlink" title="# 2. 部署上 GitHub"></a># 2. 部署上 GitHub</h3><p>產生靜態文件後，部署上 GitHub</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>

<p>等一段時間後就能到<code>https://yourname.github.io/</code>查看有沒有成功部署，接下來就可以開始寫文章哩。</p>
<h4 id="—Problem-Solution—"><a href="#—Problem-Solution—" class="headerlink" title="# —Problem+Solution—"></a># —Problem+Solution—</h4><p>執行<code>hexo d</code>報錯：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ERROR Deployer not found: git</span><br></pre></td></tr></table></figure>

<p>解決方案<br>這是因為沒安裝 hexo-deployer-git 插件，在<code>站點目錄</code>下輸入下面的插件安裝就好了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>(如果不成功—&gt;連接Github與本地)</p>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="# 常用指令"></a># 常用指令</h2><p><a href="https://hexo.io/zh-tw/docs/commands.html">指令</a></p>
<ol>
<li><code>hexo generate (hexo g)</code> 產生靜態檔案，會在目錄下產生public 資料夾。</li>
<li><code>hexo server (hexo s)</code> 啟動伺服器，預設是 <code>http://localhost:4000/</code>。</li>
<li><code>hexo deploy (hexo d)</code> 部署網站。（ 比如 github, heroku 等平台 ）</li>
<li><code>hexo clean (hexo cl)</code> 清除快取檔案 (db.json) 和已產生的靜態檔案 (public)，如過修改檔案沒有響應到頁面，使用這個指令再啟動伺服器</li>
</ol>
<h2 id="更換hexo主題"><a href="#更換hexo主題" class="headerlink" title="# 更換hexo主題"></a># 更換hexo主題</h2><h3 id="NexT"><a href="#NexT" class="headerlink" title="# NexT"></a># NexT</h3><p>Hexo 預設的主題是<a href="https://github.com/hexojs/hexo-theme-landscape">landscape</a>，而我們可以到 <a href="https://hexo.io/themes/">這裡</a> 來挑選我們想要的主題，而其中最多人用的應該就屬 <a href="https://theme-next.org/">NexT</a> 了。</p>
<p>安裝NexT</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next.git themes&#x2F;next</span><br></pre></td></tr></table></figure>

<p>接著修改網站設定<code>_config.yml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<p>重新啟動server</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<h4 id="—Problem-Solution—-1"><a href="#—Problem-Solution—-1" class="headerlink" title="# —Problem+Solution—"></a># —Problem+Solution—</h4><p>如果不成功，試著清除先前已生成的檔案</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>

<p>到<code>https://yourname.github.io/</code>查看有沒有成功部署</p>
<h3 id="語言設定"><a href="#語言設定" class="headerlink" title="# 語言設定"></a># 語言設定</h3><p>在<code>_config.yml</code>中找到language，設定為zh-tw</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">language: zh-tw</span><br></pre></td></tr></table></figure>

<p>這樣就可已支援繁體中文。</p>
<h3 id="Scheme-設定"><a href="#Scheme-設定" class="headerlink" title="# Scheme 設定"></a># Scheme 設定</h3><p>在NexT 中有多種Scheme 可選擇，其中的預設主題為Muse。大部份看到蠻多人選擇使用Pisces當主題。</p>
<p>在主題設定<code>theme/next/_config.yml</code>裡找到schema，把註解去掉即可開啟。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure>

<h3 id="代碼高亮"><a href="#代碼高亮" class="headerlink" title="# 代碼高亮"></a># 代碼高亮</h3><p>NexT 使用 Tomorrow Theme 當作代碼高亮，共有5款主題可以選擇。 NexT 預設使用的是 normal，可選的值有 normal、night、 night blue、 night bright、 night eighties</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">highlight_theme: normal</span><br></pre></td></tr></table></figure>

<h3 id="背景特效"><a href="#背景特效" class="headerlink" title="# 背景特效"></a># 背景特效</h3><p>在主題設定<code>themes/next/_config.yml</code>裡還有另外的動畫效果，要打開就把值設定為true。</p>
<h2 id="連接Github與本地倉庫"><a href="#連接Github與本地倉庫" class="headerlink" title="# 連接Github與本地倉庫"></a># 連接Github與本地倉庫</h2><h3 id="Git-setting"><a href="#Git-setting" class="headerlink" title="# Git setting"></a># Git setting</h3><p>在每一次的 Git commit (提交，我們稍後會提到) 都會記錄作者的訊息像是 name 及 email ，因此我們使用下面的指令來設定：</p>
<p>加上 <code>--global</code> 表示是全域的設定。你可以使用 <code>git config --list</code> 這個指令來看你的 Git 設定內容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;username&quot;</span><br><span class="line">$ git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>用戶名和郵箱根據你註冊github的信息自行修改。</p>
<blockquote>
<p>使用<code>git config --list</code>可查看配置的相關信息 —&gt;  進入vim</p>
<p><code>:q</code> —&gt; exit</p>
<p><code>:w</code> —&gt; save</p>
<p><code>:wq</code> —&gt;save and exit</p>
<p>或是其實 Git 的設定檔是儲存在你的家目錄的.gitconfig 隱藏檔中，你可以使用編輯器將他打開</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat ~&#x2F;.gitconfig</span><br><span class="line">    [user]</span><br><span class="line">        name &#x3D; Jimmy Kuo</span><br><span class="line">        email &#x3D; jimmy@gogojimmy.net</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="生成密鑰SSH-key"><a href="#生成密鑰SSH-key" class="headerlink" title="# 生成密鑰SSH key"></a># 生成密鑰SSH key</h3><p>為了讓GitHub可以識別文件是由GitHub用戶上傳的，我們需要創建ssh密鑰</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#生成密鑰SSH key：</span><br><span class="line">$ ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>然後一路回車鍵</p>
<img src="/2020/10/09/Blog1/5.png" title="5" alt="5">

<blockquote>
<p>Enter file in which to save the key: —&gt; Enter == save the private ssh key</p>
<p>Enter passphrase (empty for no passphrase): —&gt; Enter == without setting password for private ssh key<br>Enter same passphrase again: —&gt;  Enter == without setting password for private ssh key</p>
</blockquote>
<p>接下來就會產生key到指定位置了</p>
<p>會有兩個key 一個有副檔名 .pub 為公鑰，而沒有副檔名的為私鑰</p>
<p><mark>注意私鑰要保存好 絕對不能被竊取</mark></p>
<h3 id="Add-public-ssh-key-on-github"><a href="#Add-public-ssh-key-on-github" class="headerlink" title="# Add public ssh key on github"></a># Add public ssh key on github</h3><p>打開github，在頭像下麵點擊settings，再點擊SSH and GPG keys，新建一個SSH，名字隨便。</p>
<img src="/2020/10/09/Blog1/6.png" alt="6" width="40%" height="40%">

<img src="/2020/10/09/Blog1/7.png" alt="7">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#公鑰</span><br><span class="line">$ cat ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>將輸出的內容複製到 key 框中，點擊確定保存。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>輸入<code>ssh -T git@github.com</code>，如果如下圖所示，出現你的用戶名，那就成功了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hi github用戶名! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<h3 id="把檔案交給-Git-控管"><a href="#把檔案交給-Git-控管" class="headerlink" title="# 把檔案交給 Git 控管"></a># 把檔案交給 Git 控管</h3><p><a href="https://gitbook.tw/chapters/using-git/add-to-git.html">把檔案交給 Git 控管</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;change Theme to nexT&quot;</span><br></pre></td></tr></table></figure>

<h4 id="—Problem-Solution—-2"><a href="#—Problem-Solution—-2" class="headerlink" title="# —Problem+Solution—"></a># —Problem+Solution—</h4><p><a href="https://www.cnblogs.com/reboot777/p/11164193.html">Hexo + Github page博客 themes/next 文件夹因存在.git而无法提交到git的解决办法</a></p>
<img src="/2020/10/09/Blog1/8.png" title="8" alt="8">

<p>解決方法：</p>
<p>1.剪切（刪除） Theme/next/.git文件夾到其他處</p>
<p>打開一個Terminal終端窗口，輸入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#顯示文件夾</span><br><span class="line">$ defaults write com.apple.finder AppleShowAllFiles TRUE</span><br><span class="line"></span><br><span class="line">#最後重啟finder</span><br><span class="line">$ killall Finder</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#隱藏文件夾</span><br><span class="line">$ defaults write com.apple.finder AppleShowAllFiles FALSE</span><br><span class="line"></span><br><span class="line">#最後重啟finder</span><br><span class="line">$ killall Finder</span><br></pre></td></tr></table></figure>

<img src="/2020/10/09/Blog1/9.png" title="9" alt="9">

<p>2.從暫存區刪除該文件夾</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git rm --cached themes&#x2F;next</span><br></pre></td></tr></table></figure>



<h3 id="推上遠端的-Git-伺服器"><a href="#推上遠端的-Git-伺服器" class="headerlink" title="# 推上遠端的 Git 伺服器"></a># 推上遠端的 Git 伺服器</h3><p>在這之前，我們所有的操作都是在自己電腦上，接下來就是要準備把東西推上遠端的 Git 伺服器了。首先，需要設定一個端節的節點</p>
<img src="/2020/10/09/Blog1/10.png" title="10" alt="10">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#加入遠端節點：</span><br><span class="line">$ git remote add origin repositpry-link</span><br></pre></td></tr></table></figure>

<p>origin 只是一個遠端的代名詞，會取這個名字是因為如果從 Server Clone 下來會是這個代稱。所以如果把上面那句指令翻成中文的話：「為目前所在本地端檔案庫增加一個叫做 origin 的遠端檔案庫」</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#將本地端檔案庫（local repo）推上一個叫做 origin 的遠端檔案庫（remote repo）master 分支：</span><br><span class="line">$ git push -u origin master</span><br><span class="line">＃可能需要輸入</span><br><span class="line">Username for &#39;https:&#x2F;&#x2F;github.com&#39;: 輸入 Github 上的 帳號</span><br><span class="line">Password for &#39;https:&#x2F;&#x2F;miahsu0330@github.com&#39;:輸入 Github 上的 密碼</span><br></pre></td></tr></table></figure>

<p>定好每次要 Push 時就不用再次輸入「上游」的名稱，Git 就會知道要推往哪個遠端節點，反之如果沒設定，就要每次都輸入遠端節點的名稱。</p>
<p><img src="/2020/10/09/Blog1/11.png" alt="11"></p>
<h4 id="—Problem-Solution—-3"><a href="#—Problem-Solution—-3" class="headerlink" title="# —Problem+Solution—"></a># —Problem+Solution—</h4><p><a href="https://gitbook.tw/chapters/github/fail-to-push.html">【狀況題】怎麼有時候推不上去…</a></p>
<p><a href="https://exfast.me/2016/05/git-instructions-instructions/">Git 指令 – 常用指令</a></p>
<p>Push</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote add origin https:*&#x2F;&#x2F;[github.com&#x2F;XXX(username)&#x2F;YYYY(projectname).git]</span><br></pre></td></tr></table></figure>

<p>加上一個remote的位址，名叫origin，位址是github上的地址（Create a new repo就會有）<br>因為Git是分散式的，所以可以有多個remote.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

<p>將本地內容push到github上的那個位址上去。</p>
<p><code>參數-u</code><br>用了參數-u之後，以後就可以直接用不帶參數的git pull從之前push到的分支來pull。</p>
<p>此時如果origin的master分支上有一些本地沒有的提交,push會失敗.</p>
<p>這是因為遠端的版本比你電腦裡的這份更新，因此 Git 不讓你推上去。</p>
<p>所以解決的辦法是, 首先設定本地master的上游分支:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch --set-upstream-**to**&#x3D;origin&#x2F;master</span><br></pre></td></tr></table></figure>

<p>然後pull:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git pull --rebase</span><br></pre></td></tr></table></figure>

<p>最後再push:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push</span><br></pre></td></tr></table></figure>

<p>如果還是不行push，砍掉重新來過</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="# Reference"></a># Reference</h2><p><a href="https://medium.com/@bebebobohaha/%E4%BD%BF%E7%94%A8-hexo-gitpage-%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA-blog-5c6ed52f23db">如何搭建個人 Blog 使用 Hexo + Gitpage</a></p>
<p><a href="https://blackmaple.me/hexo-tutorial/">Hexo+GitHub，新手也可以快速建立部落格</a></p>
<p><a href="https://musoucrow.github.io/2017/02/26/build_bolg/">在Mac平台使用GitHub和Hexo搭建博客</a></p>
<p><a href="https://xenby.com/b/220-%E6%95%99%E5%AD%B8-%E7%94%A2%E7%94%9Fssh-key%E4%B8%A6%E4%B8%94%E9%80%8F%E9%81%8Ekey%E9%80%B2%E8%A1%8C%E5%85%8D%E5%AF%86%E7%A2%BC%E7%99%BB%E5%85%A5">[教學] 產生SSH Key並且透過KEY進行免密碼登入</a></p>
<p><a href="https://www.itread01.com/content/1546966625.html">如何解決github+Hexo的部落格多終端同步問題</a></p>
<p><a href="https://segmentfault.com/a/1190000007466317">git连接github总结</a></p>
<p><a href="https://medium.com/@miahsuwork/%E7%AC%AC%E4%BA%8C%E9%80%B1-git-%E6%9C%AC%E5%9C%B0%E7%AB%AF%E8%88%87%E9%81%A0%E7%AB%AF%E6%93%8D%E4%BD%9C-github-78eec4537179">[第二週] Git 本地端連結遠端操作（GitHub）</a></p>
<p><a href="https://git-scm.com/book/zh-tw/v2/Git-%E5%9F%BA%E7%A4%8E-%E8%88%87%E9%81%A0%E7%AB%AF%E5%8D%94%E5%90%8C%E5%B7%A5%E4%BD%9C">2.5 Git 基礎 - 與遠端協同工作</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>git</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>新手搭建Blog part2：分類、標籤</title>
    <url>/2020/10/09/Blog2/</url>
    <content><![CDATA[<h1 id="新手搭建Blog-part2：分類、標籤"><a href="#新手搭建Blog-part2：分類、標籤" class="headerlink" title="新手搭建Blog part2：分類、標籤"></a>新手搭建Blog part2：分類、標籤</h1><h2 id="發佈文章"><a href="#發佈文章" class="headerlink" title="# 發佈文章"></a># 發佈文章</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>如果沒有設定 <code>layout</code> 的話，則會使用 <code>_config.yml</code>中的 <code>default_layout</code> 設定代替。如果標題包含空格的話，請使用引號括起來。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new “postName” # 新建文章</span><br><span class="line">$ hexo new page “pageName” # 新建頁面</span><br></pre></td></tr></table></figure>

<p>所有的文章都會在<code>source/_posts</code>裡面。一開始裡面就已經有一篇範例文章<code>hello-world.md</code>了。</p>
<a id="more"></a>

<p>常用组合</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo d -g # 產生靜態檔後部署</span><br><span class="line">$ hexo s -g # 產生靜態檔後預覽</span><br></pre></td></tr></table></figure>

<p>如果想在 <code>local</code> 端先確認內容，可以用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server #執行</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果想用線上編輯器，<a href="https://hackmd.io/sHXhBDrtQh-nzU5oeVotGw">HackMD</a>、<a href="https://markdown-editor.github.io/">markdown-editor</a></p>
</li>
<li><p>如果用的編輯器是<code>vscode</code>，可以看看<a href="https://marketplace.visualstudio.com/items?itemName=mdickin.markdown-shortcuts">Markdown Shortcuts</a>跟<a href="https://marketplace.visualstudio.com/items?itemName=bierner.markdown-preview-github-styles">Markdown Preview Github Styling</a></p>
</li>
</ul>
<h2 id="刪除文章"><a href="#刪除文章" class="headerlink" title="# 刪除文章"></a># 刪除文章</h2><p>首先進入到 source /_post 資料夾中，找到 helloworld.md 文件，在本地直接執行刪除。</p>
<p>刪除後執行以下指令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean    # 清除快取檔案和已產生的靜態檔案。</span><br><span class="line">$ hexo d -g     # d &#x3D; deploy, g &#x3D; generate</span><br></pre></td></tr></table></figure>

<p>等一段時間，就會發現那篇文章已經消失</p>
<h2 id="創建“分類”選項-Categories"><a href="#創建“分類”選項-Categories" class="headerlink" title="# 創建“分類”選項(Categories)"></a># 創建“分類”選項(Categories)</h2><h3 id="新增文章分類頁面，添加type屬性"><a href="#新增文章分類頁面，添加type屬性" class="headerlink" title="# 新增文章分類頁面，添加type屬性"></a># 新增文章分類頁面，添加type屬性</h3><p>新建一个頁面，命名为 categories。命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure>

<p>接著修改剛剛產生的 source/categories/inex.md ，添加<code>type: &quot;categories&quot;</code>到内容中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2020-10-09 16:22:14</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="給文章添加categories属性"><a href="#給文章添加categories属性" class="headerlink" title="# 給文章添加categories属性"></a># 給文章添加categories属性</h3><p>讓文章增加分類，只要在 categories 後面加入類別就可以了，記得要空格！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">layout: building</span><br><span class="line">title: Blog</span><br><span class="line">date: 2020-10-09 16:17:51</span><br><span class="line">tags:</span><br><span class="line">categories: 分類名稱</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>至此，成功給文章添加分類，點擊首頁的“分類”可以看到該分類下的所有文章。當然，只有添加了categories: xxx的文章才會被收錄到首頁的“分類”中。</p>
<p>注意：hexo一篇文章只能屬於一個分類，也就是說如果在“web”下方添加“java”，hexo不會產生兩個分類，而是把分類嵌套（即該文章屬於“ web”下的”java ”分類）。</p>
<h2 id="創建“標籤”選項-tags"><a href="#創建“標籤”選項-tags" class="headerlink" title="# 創建“標籤”選項 (tags)"></a># 創建“標籤”選項 (tags)</h2><h3 id="生成“標籤”頁並添加tpye屬性"><a href="#生成“標籤”頁並添加tpye屬性" class="headerlink" title="# 生成“標籤”頁並添加tpye屬性"></a># 生成“標籤”頁並添加tpye屬性</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure>

<p>接著修改剛剛產生的 source/tags/inex.md ，添加<code>type: &quot;tags&quot;</code>到内容中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2019-04-01 22:55:41</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="給文章添加“tags”屬性"><a href="#給文章添加“tags”屬性" class="headerlink" title="# 給文章添加“tags”屬性"></a># 給文章添加“tags”屬性</h3><p>讓文章增加分類，只要在 tags 後面加入標籤就可以了，一樣記得要空格！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 新的文章</span><br><span class="line">date: 2017-05-26 12:12:57</span><br><span class="line">categories: 文章類別</span><br><span class="line">tags:</span><br><span class="line">- 標籤1</span><br><span class="line">- 標籤2</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>一篇文章只可以有一個類別，但是可以同時有很多個標籤，不同的標籤要用空格來分開。</p>
<h2 id="新建頁面的模板"><a href="#新建頁面的模板" class="headerlink" title="# 新建頁面的模板"></a># 新建頁面的模板</h2><p>另外如果不想要每次新增文章都要輸入一次 “categories:” 與 “tags”，可以修改 scaffolds/post.md</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories: &#123;&#123; categories &#125;&#125;</span><br><span class="line">tags: &#123;&#123; tags &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>scaffolds目錄下，是新建頁面的模板，執行新建命令時，是根據這裡的模板頁來完成的，所以可以在這裡根據你自己的需求添加一些默認值。</p>
<p>這樣每次產生新的文章就會自動帶入 categories 跟 tags 了。</p>
<h2 id="側欄配置"><a href="#側欄配置" class="headerlink" title="# 側欄配置"></a># 側欄配置</h2><p>以上修改完後，記得還要去主題配置的 menu 中把 categories 跟 tags 打開，這樣才能在側欄中看到！</p>
<p>打開 主題配置文件 找到Menu Settings ，把 categories 和 tags 取消註釋。</p>
<img src="/2020/10/09/Blog2/1.png" alt="1">

<p>另外是如果原本就有寫好的文章的話，直接修改 .md 檔加入 categories 跟 tags，即使重新 clean, generate, deploy，Hexo 是不會理你的，要重新發一篇文章才會有文章分類或標籤。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="# Reference"></a># Reference</h2><p><a href="https://hexo.io/zh-tw/index.html">Hexo 官方網站</a></p>
<p><a href="http://theme-next.iissnan.com/">NexT 官方網站</a></p>
<p><a href="https://kemushi54.github.io/2019/04/01/%E7%AD%86%E8%A8%98-%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84-blog%EF%BC%8CHexo-Github-%E4%B9%8B%E4%BA%8C/">[筆記] 打造自己的 blog，Hexo + Github 之二</a></p>
<p><a href="https://blackmaple.me/hexo-tutorial/">Hexo+GitHub，新手也可以快速建立部落格</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>從零搭建Blog part3： 圖片和其他資源</title>
    <url>/2020/10/09/Blog3/</url>
    <content><![CDATA[<h1 id="從零搭建Blog-part3：-圖片和其他資源"><a href="#從零搭建Blog-part3：-圖片和其他資源" class="headerlink" title="從零搭建Blog part3： 圖片和其他資源"></a>從零搭建Blog part3： 圖片和其他資源</h1><h2 id="絕對路徑本地引用"><a href="#絕對路徑本地引用" class="headerlink" title="# 絕對路徑本地引用"></a># 絕對路徑本地引用</h2><p>當Hexo項目中只用到少量圖片時，可以將圖片統一放在source/images文件夾中，通過markdown語法訪問它們。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![](&#x2F;images&#x2F;image.jpg)</span><br></pre></td></tr></table></figure>

<p>圖片既可以在首頁內容中訪問到，也可以在文章正文中訪問到。</p>
<ul>
<li><p><code>![example](assetsTest/example.png)</code></p>
<p>幾乎所有的 markdown 編輯器都支持的相對引用的寫法，在markdown 編輯器的預覽視圖中都能正常顯示圖片，但在主頁和文章中無法正常顯示。</p>
</li>
</ul>
<p>為了解決無法在主頁和文章中正常顯示的問題，需要安裝<a href="https://github.com/xcodebuild/hexo-asset-image">hexo-asset-image</a>插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image@0.0.1 --save</span><br></pre></td></tr></table></figure>
<a id="more"></a>



<h2 id="相對路徑本地引用"><a href="#相對路徑本地引用" class="headerlink" title="# 相對路徑本地引用"></a># 相對路徑本地引用</h2><p>圖片除了可以放在統一的images文件夾中，還可以放在文章自己的目錄中。文章的目錄可以通過站點配置文件_config.yml來生成。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#_config.yml</span><br><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>

<p>config.yml文件中的配置項<code>post_asset_folder</code>設為<code>true</code>後，執行命令<code>$ hexo new post_nam</code>e，在source/_posts中會生成文章<code>post_name.md</code>和<code>同名文件夾post_name</code>。將圖片資源放在<code>post_name文件夾</code>中，文章就可以使用相對路徑引用圖片資源了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![](image.jpg)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>![example](example.png)</code></p>
<p>Hexo 官方文檔關於 markdown 的示例寫法，圖片不能在主頁正常顯示，但在文章中能正常顯示。此外，這種相對引用寫法在絕大數markdown 編輯器的預覽視圖中都無法正常顯示圖片（Typora 通過設置<code>Use Image Root Path</code> 可以解決，它會在文件頭添加<code>typora-root-url: xxxx </code>）。</p>
</li>
</ul>
<h2 id="標籤插件語法引用"><a href="#標籤插件語法引用" class="headerlink" title="# 標籤插件語法引用"></a># 標籤插件語法引用</h2><p>通過常規的MarkDown語法和相對路徑引用圖片或其它資源相對方便，但是這些包含相對位置引用資源的文章在首頁，或者存檔頁面不能正常顯示。 HEXO 3開始核心代碼中加入了相對路徑引用的標籤插件，用以解決這個問題。 （在HEXO 3之前許多開發者開發類似插件，現在被官方更新後核心代碼採用了）。</p>
<p>並且需要安裝插件，安裝方法為:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;7ym0n&#x2F;hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 本地圖片資源，不限製圖片尺寸</span><br><span class="line">&#123;% asset_img image.jpg This is an image %&#125;</span><br><span class="line"># 網絡圖片資源，限製圖片顯示尺寸</span><br><span class="line">&#123;% img http:&#x2F;&#x2F;www.viemu.com&#x2F;vi-vim-cheat-sheet.gif 200 400 vi-vim-cheat-sheet %&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>&#123;% asset_img example.png example %&#125;</code></p>
<p>Hexo 官方推薦使用標籤的寫法，圖片能在主頁和文章中正常顯示，但是不能在 markdown 編輯器的預覽視圖中預覽圖片。</p>
</li>
</ul>
<h3 id="啟用fancybox：點擊查看圖片大圖"><a href="#啟用fancybox：點擊查看圖片大圖" class="headerlink" title="# 啟用fancybox：點擊查看圖片大圖"></a># 啟用fancybox：點擊查看圖片大圖</h3><p>我這裡使用的是Hexo的NexT主題，NexT主題中提供了fancybox的方便接口。</p>
<p>Usage：<a href="https://github.com/theme-next/theme-next-fancybox3">https://github.com/theme-next/theme-next-fancybox3</a><br>markdown用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% img http:&#x2F;&#x2F;www.viemu.com&#x2F;vi-vim-cheat-sheet.gif 600 600 &quot;點擊查看圖片大圖:vi&#x2F;vim-cheat-sheet&quot; %&#125;</span><br></pre></td></tr></table></figure>



<h2 id="HTML語法引用（最終手段，一定能成，推薦）"><a href="#HTML語法引用（最終手段，一定能成，推薦）" class="headerlink" title="# HTML語法引用（最終手段，一定能成，推薦）"></a># HTML語法引用（最終手段，一定能成，推薦）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;image.png&quot; width&#x3D;&quot;50%&quot; height&#x3D;&quot;50%&quot; title&#x3D;&quot;image&quot; alt&#x3D;&quot;image&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p><mark>使用此方法要注意路徑</mark></p>
<p>config.yml文件中的配置項<code>post_asset_folder</code>設為<code>true</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ tree source&#x2F;_posts </span><br><span class="line">source&#x2F;_posts</span><br><span class="line">├── Blog1</span><br><span class="line">│   └── image1.png</span><br><span class="line">└── Blog1.md</span><br><span class="line"></span><br><span class="line"># Blog1.md 中的 HTML語法引用</span><br><span class="line">&lt;img src&#x3D;&quot;.&#x2F;image1.png&quot; width&#x3D;&quot;50%&quot; height&#x3D;&quot;50%&quot; title&#x3D;&quot;image&quot; alt&#x3D;&quot;image&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p><a href="https://stackoverflow.com/questions/8304172/tree-command-on-osx-bash">tree command on osx bash</a></p>
<h2 id="—Problem—"><a href="#—Problem—" class="headerlink" title="# —Problem—"></a># —Problem—</h2><p>問題推測</p>
<p>（一）本地圖片沒有有效上傳至github倉庫中，導致引用無效</p>
<p>解決方案：安裝外掛（回看前文）</p>
<p>（二）本地圖片沒有存放在同名資料夾中</p>
<p>解決方案：將需要引用的本地圖片存放在與文章名相同的資料夾中</p>
<p>（三）圖片路徑出錯</p>
<h2 id="reference"><a href="#reference" class="headerlink" title="# reference"></a># reference</h2><p><a href="https://hexo.io/zh-cn/docs/asset-folders.html">資源文件夾</a></p>
<p><a href="https://fuhailin.github.io/Hexo-images/">在Hexo博客中插入图片的各种方式</a></p>
<p><a href="https://www.itread01.com/content/1542264790.html">hexo引用本地圖片無法顯示</a></p>
<p><a href="https://hexo.io/zh-tw/docs/tag-plugins.html">標籤外掛（Tag Plugins）</a></p>
<p><a href="https://blog.csdn.net/qq_32767041/article/details/103283522">Hexo 搭建个人博客（五）Hexo 资源文件夹</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Database Cache Consistency Strategies</title>
    <url>/2023/09/07/Database-Cache-Consistency-Strategies/</url>
    <content><![CDATA[<p>Database cache consistency strategies include:</p>
<ul>
<li>Cache Aside</li>
<li>Read/Write Through</li>
<li>Write Behind Caching</li>
</ul>
<h1 id="Cache-Aside-Pattern"><a href="#Cache-Aside-Pattern" class="headerlink" title="Cache Aside Pattern"></a>Cache Aside Pattern</h1><p><em>Eventually Database Cache Consistency</em></p>
<ul>
<li>Cache miss: The application retrieves data from the cache. If data doesn’t exists in the cache, retrieves data from database and stores it in the cache. The requested data is returned from database.</li>
<li>Cache hit: The application retrieves data from the cache and returns.</li>
<li>Update data: Stores the data in the database first, and then invalidates the cache after success.<a id="more"></a>
<a href="https://catsincode.com/caching-strategy/">Cache-aside caching strategy</a><img src="/2023/09/07/Database-Cache-Consistency-Strategies/1.png" width="40%" height="40%" alt="1">


</li>
</ul>
<p>Cache-aside strategy fits well for data that is read often and not so often stored or updated. One downside of this strategy is possible data inconsistency between the cache and the database.</p>
<p>Consider the following situation.</p>
<img src="/2023/09/07/Database-Cache-Consistency-Strategies/inconsistency_between_database_and_cache.png" alt="inconsistency_between_database_and_cache">

<p>inconsistency between the cache and the database</p>
<p>However, the probability of occurrence may be very low in practice, because the write operation of the database is slower than the read operation. To avoid inconsistency of data, you can set a timeout on data in cache and it will automatically be deleted in a time period.</p>
<h1 id="Read-Write-Through-Pattern"><a href="#Read-Write-Through-Pattern" class="headerlink" title="Read/Write Through Pattern"></a><strong>Read/Write Through Pattern</strong></h1><p><em>Strong Database Cache Consistency</em></p>
<p>Application views the backend as a single storage, and the storage maintains its own Cache.</p>
<p><strong>Read Through</strong></p>
<p>The application doesn’t orchestrate where to read the data from (cache or database). Instead, it always reads data through the cache. When the cache is invalid (expired or LRU swapped out) during query operation(request), the cache service itself loads data from database.</p>
<p><strong>Write Through</strong></p>
<p>The Write Through is similar to Read Through, but happens when data is updated. When there is data updated,</p>
<ul>
<li>if the cache is not hit, update the database directly, and then return.</li>
<li>If the cache is hit, the cache is updated, and updates the data in database. Both operations happen in a single transaction(this is a synchronous operation)</li>
</ul>
<p><a href="https://en.wikipedia.org/wiki/Cache_(computing)">A write-through cache with no-write allocation</a><br><img src="/2023/09/07/Database-Cache-Consistency-Strategies/2.png" width="40%" height="40%" alt="2"></p>
<p>It does create some extra latency on writes but at least it improves the data inconsistency problem greatly as the data in the cache and data storage is the same. Another advantage is, because application only talks to the cache, the code is much cleaner and simpler.</p>
<h1 id="Write-Behind-Caching-Pattern"><a href="#Write-Behind-Caching-Pattern" class="headerlink" title="Write Behind Caching Pattern"></a><strong>Write Behind Caching Pattern</strong></h1><p><em>Eventually Database Cache Consistency</em></p>
<p>Write-behind(also call Write Back) caching Pattern is similar to the write-through cache in a way that application only communicates with the cache. The difference is that the data gets written to the cache first. And then, written to the underlying database asynchronously. The advantage of this design is that the I/O operation of the data is extremely fast. Also, due to asynchronous update in database, the writes can be collected and then does a batch write to the database.</p>
<p>However, the problem with this is that the data is not strongly consistent and may be lost. To tackle the data inconsistency problem a system could combine the write-behind strategy with the read-through strategy. In this way up to date data is always to be read from the cache. In addition, the implementation logic of Write Back is more complicated, because it needs to track which data has been updated and needs to be stored in database.</p>
<p>When we compare it to the write-through strategy, it fits more for systems with large write and read volume that tolerate some data inconsistency. Another useful case is that when execution order of data updated doesn’t matter, like the number of page views, every time the user clicks, this field in the database is incremented by one. Execution order of SQL/request would not cause thread safety problem in concurrently write and read, since each SQL/request does the same(page views field incremented by one).</p>
<h1 id="Final"><a href="#Final" class="headerlink" title="Final"></a><strong>Final</strong></h1><p>We do not consider the transaction of the cache and under layer storage. For example, the cache is updated successfully, but the update of the database fails. Or the other way reverse. If you need strong consistency, you need to consider Transaction Processing in a Distributed System, like “two-phase commit protocol” — — prepare, commit/rollback.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h1><p><a href="https://danielw.cn/cache-consistency-with-database#concepts">Cache Consistency with Database</a></p>
<p><a href="https://catsincode.com/caching-strategy/">Caching Strategies Overview</a></p>
<p><a href="https://catsincode.com/caching-strategy/">缓存更新的套路</a></p>
<p><a href="https://en.wikipedia.org/wiki/Cache_(computing)">Cache (computing)</a></p>
<p><a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/cache-aside">Cache-Aside pattern</a></p>
]]></content>
      <categories>
        <category>System Design</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Cache</tag>
      </tags>
  </entry>
  <entry>
    <title>Debouncing Mechanism With Golang</title>
    <url>/2023/12/25/Debouncing-mechanism/</url>
    <content><![CDATA[<p>Debouncing mechanism can be useful in scenarios where you want to handle events that may be triggered frequently but should only be processed once within a certain time window. It is particularly suitable for:</p>
<ul>
<li>Button Clicks</li>
<li>Event Handling</li>
<li>Throttling</li>
</ul>
<a id="more"></a>

<h2 id="Debouncing-to-ensure-that-only-the-final-input-registers-or-prevails"><a href="#Debouncing-to-ensure-that-only-the-final-input-registers-or-prevails" class="headerlink" title="Debouncing to ensure that only the final input registers or prevails"></a>Debouncing to ensure that only the final input registers or prevails</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">--|--|--|--|--|--|--|--|-------------------|--|--|--|--|</span><br><span class="line">                       trigger                         trigger</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/bep/debounce/blob/master/debounce.go">reference code</a><br>This code snippet provides a simpler and more lightweight debouncing mechanism. The debouncer function takes a callback function and ensures that it is called only after a specified time duration has passed since the last invocation.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> debounceDelay = <span class="number">1</span> * time.Second</span><br><span class="line"><span class="keyword">const</span> eventTriggerInterval = <span class="number">500</span> * time.Millisecond</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// Create a debouncer with a 500ms delay</span></span><br><span class="line">	debounce := New(debounceDelay)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Create a channel to receive events</span></span><br><span class="line">	eventChannel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Goroutine to listen to the channel and debounce events</span></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">for</span> &#123;</span><br><span class="line">			<span class="comment">// Wait for an event to be received on the channel</span></span><br><span class="line">			&lt;-eventChannel</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Trigger the debouncer with the function you want to execute</span></span><br><span class="line">			debounce(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">				<span class="comment">// Your code to be executed after the debounce delay</span></span><br><span class="line">				<span class="built_in">println</span>(<span class="string">&quot;Event debounced&quot;</span>)</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Simulate events by sending to the channel</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;event %d at time %v\n&quot;</span>, i, time.Now())</span><br><span class="line">		<span class="comment">// Simulate an event by sending to the channel</span></span><br><span class="line">		eventChannel &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Sleep for a short duration to simulate time passing between events</span></span><br><span class="line">		time.Sleep(eventTriggerInterval)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Wait for some time to allow debouncer to process the last event</span></span><br><span class="line">	time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// The debounced function can be invoked with different functions, if needed,</span></span><br><span class="line"><span class="comment">// the last one will win.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(after time.Duration)</span> <span class="title">func</span><span class="params">(f <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">	d := &amp;debouncer&#123;after: after&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(f <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">		d.add(f)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> debouncer <span class="keyword">struct</span> &#123;</span><br><span class="line">	mu    sync.Mutex</span><br><span class="line">	after time.Duration</span><br><span class="line">	timer *time.Timer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *debouncer)</span> <span class="title">add</span><span class="params">(f <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">	d.mu.Lock()</span><br><span class="line">	<span class="keyword">defer</span> d.mu.Unlock()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> d.timer != <span class="literal">nil</span> &#123;</span><br><span class="line">		d.timer.Stop()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create a new timer and start it</span></span><br><span class="line">	d.timer = time.AfterFunc(d.after, f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="Debouncing-for-fine-grained-control-over-frequent-events-achieving-precise-timing-control"><a href="#Debouncing-for-fine-grained-control-over-frequent-events-achieving-precise-timing-control" class="headerlink" title="Debouncing for fine-grained control over frequent events, achieving precise timing control"></a>Debouncing for fine-grained control over frequent events, achieving precise timing control</h2><p>This code provides a more comprehensive implementation to handle frequent events with precise timing control. The triggers are collected in a channel, and the debouncing logic ensures that only the last trigger within a specified interval is processed.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-----|-----|-----|-----|-----|-----|-----|-----|-----=-----------|----- ----- -----=-----</span><br><span class="line">              trigger           trigger           trigger                      trigger</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;runtime&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">	<span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> debounceInterval time.Duration = <span class="number">3</span> * time.Second</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// Set the time interval for the ticker</span></span><br><span class="line">	interval := <span class="number">1</span> * time.Second</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Set the total duration to listen to the ticker</span></span><br><span class="line">	totalDuration := <span class="number">10</span> * time.Second</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Create a ticker that ticks at the specified interval</span></span><br><span class="line">	ticker := time.NewTicker(interval)</span><br><span class="line">	<span class="keyword">defer</span> ticker.Stop()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Create a channel to signal the end of the program after the specified duration</span></span><br><span class="line">	done := time.After(totalDuration)</span><br><span class="line"></span><br><span class="line">	manager := &amp;ResourceManager&#123;</span><br><span class="line">		TriggerTimes: <span class="built_in">make</span>(<span class="keyword">chan</span> time.Time, <span class="number">100</span>),</span><br><span class="line">		Done:         <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">1</span>),</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">		manager.DebounceTrigger()</span><br><span class="line"></span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Start a loop to listen to ticker events</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-ticker.C:</span><br><span class="line">			<span class="comment">// Do something on each tick</span></span><br><span class="line">			fmt.Println(<span class="string">&quot;Tick&quot;</span>)</span><br><span class="line">			manager.TriggerTimes &lt;- time.Now()</span><br><span class="line">		<span class="keyword">case</span> &lt;-done:</span><br><span class="line">			<span class="comment">// Break out of the loop after the specified duration</span></span><br><span class="line">			fmt.Println(<span class="string">&quot;Time&#x27;s up!&quot;</span>)</span><br><span class="line">			manager.Done &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">			numGoroutines := runtime.NumGoroutine()</span><br><span class="line">			fmt.Println(numGoroutines)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ResourceManager <span class="keyword">struct</span> &#123;</span><br><span class="line">	mutex sync.Mutex</span><br><span class="line">	<span class="comment">// TriggerTimes define a channel that collects the receiving time of each message from the callback channel.</span></span><br><span class="line">	TriggerTimes <span class="keyword">chan</span> time.Time</span><br><span class="line">	Done         <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *ResourceManager)</span> <span class="title">DebounceTrigger</span><span class="params">()</span></span> &#123;</span><br><span class="line">	expectedTime := time.Now()</span><br><span class="line">	ignoredAtomic := atomic.Bool&#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> t := <span class="keyword">range</span> m.TriggerTimes &#123;</span><br><span class="line">		<span class="keyword">if</span> t.After(expectedTime) &#123;</span><br><span class="line">			expectedTime = time.Now().Add(debounceInterval)</span><br><span class="line">			fmt.Println(<span class="string">&quot;update expectedTime&quot;</span>)</span><br><span class="line">			<span class="comment">// insert a new event to m.TriggerTimes after debounceInterval.</span></span><br><span class="line">			<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">				<span class="comment">// since AfterFunc is blocking, need to run in another thread.</span></span><br><span class="line">				time.AfterFunc(debounceInterval, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">					<span class="comment">// load the ignored boolean and reset it.</span></span><br><span class="line">					<span class="keyword">if</span> ignored := ignoredAtomic.Swap(<span class="literal">false</span>); ignored &#123;</span><br><span class="line">						fmt.Printf(<span class="string">&quot;do process with time %v \n&quot;</span>, t)</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;()</span><br><span class="line"></span><br><span class="line">			fmt.Printf(<span class="string">&quot;do process with time %v \n&quot;</span>, t)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			ignoredAtomic.Store(<span class="literal">true</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Debounce</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Debounce</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker volumes Problem onUbuntu on WSL2</title>
    <url>/2023/09/10/Docker-volumes-Problem-onUbuntu-on-WSL2/</url>
    <content><![CDATA[<h2 id="Docker-Volume-type"><a href="#Docker-Volume-type" class="headerlink" title="Docker Volume type"></a>Docker Volume type</h2><p><a href="https://docs.docker.com/storage/">Manage data in Docker</a></p>
<ul>
<li><p>bind mounts :</p>
<p>When you use a bind mount, a file or directory on the host machine is mounted into a container. They rely on the host machine’s filesystem having a specific directory structure available.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">volumes:</span><br><span class="line">  — &#x2F;mnt&#x2F;c&#x2F;work&#x2F;db:&#x2F;var&#x2F;lib&#x2F;mysql”</span><br><span class="line">--&gt; manipulate data in &#x2F;mnt&#x2F;c&#x2F;work&#x2F;db on Ubuntu on WSL &#x3D;&#x3D; manipulate data &#x2F;var&#x2F;lib&#x2F;mysql in docker volume</span><br></pre></td></tr></table></figure></li>
<li><p>volumes :<br><a href="https://docs.docker.com/storage/">volumes</a></p>
<a id="more"></a>


</li>
</ul>
<p>  Volumes are stored in a part of the host filesystem which is managed by Docker (<code>/var/lib/docker/volumes/</code> on Linux). Non-Docker processes should not modify this part of the filesystem. Volumes are the best way to persist data in Docker.</p>
<p>  When you create a volume, it is stored within a directory on the Docker host. When you mount the volume into a container, this directory is what is mounted into the container. This is similar to the way that bind mounts work, except that volumes are managed by Docker and are isolated from the core functionality of the host machine.</p>
<h2 id="File-permission-problem"><a href="#File-permission-problem" class="headerlink" title="File permission problem :"></a>File permission problem :</h2><img src="/2023/09/10/Docker-volumes-Problem-onUbuntu-on-WSL2/1.png" width="80%" height="80%" alt="inconsistency_between_database_and_cache">


<p>When you use bind mounts for persisting data in generated by and used by Docker containers on Ubuntu on WSL2, you may encounter file permission problems.</p>
<ul>
<li><p>docker-compose.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  <span class="attr">db_mysql:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./db_context</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile-db-mysql</span></span><br><span class="line">    <span class="attr">env_file:</span> <span class="string">.env</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$&#123;DB_DATA_PATH_MYSQL&#125;:/var/lib/mysql&quot;</span></span><br><span class="line">    <span class="attr">command:</span>  <span class="string">--transaction-isolation=READ-COMMITTED</span> <span class="string">--socket=/tmp/mysql.sock</span> <span class="string">--sql_mode=&quot;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3316</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">docker_network:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">172.16</span><span class="number">.238</span><span class="number">.6</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">db_mysql</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Dockerfile-db_mysql</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">FROM</span> <span class="string">mysql:8.0</span></span><br><span class="line"><span class="string">COPY</span> <span class="string">my.cnf</span> <span class="string">/etc/mysql/conf.d/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>.evn</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DB_DATA_PATH_MYSQL&#x3D;&#x2F;mnt&#x2F;c&#x2F;work&#x2F;db</span><br><span class="line">MYSQL_ROOT_PASSWORD&#x3D;123456</span><br><span class="line">MYSQL_USER&#x3D;test</span><br><span class="line">MYSQL_PASSWORD&#x3D;test123</span><br></pre></td></tr></table></figure>
</li>
<li><p>Error log like:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld: Can&#39;t change permissions of the file &#39;ca-key.pem&#39; (Errcode: 1 - Operation not permitted)</span><br><span class="line">2022-03-25T05:32:05.406540Z 0 [ERROR] Could not set file permission for ca-key.pem</span><br><span class="line">2022-03-25T05:32:05.406553Z 0 [ERROR] Aborting</span><br><span class="line">2022-03-04T02:58:39.130160Z 0 [ERROR] [MY-010295] [Server] Could not set file permission for ca.pem</span><br><span class="line">2022-03-04T02:58:39.130213Z 0 [ERROR] [MY-013236] [Server] The designated data directory &#x2F;var&#x2F;lib&#x2F;mysql&#x2F; is unusable. You can remove all files that the server added to it.</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>These problems are caused by sharing files permission across the Windows Subsystem for Linux (WSL) and Window. Windows file systems differ substantially from Linux file systems. WSL use a filesystem plugin DrvFs to support interop between WSL and the Windows filesystem.</p>
<blockquote>
<p><a href="https://github.com/MicrosoftDocs/wsl/blob/main/WSL/wsl-config.md">MicrosoftDocs/WSLPublic</a><br>  <a href="https://devblogs.microsoft.com/commandline/chmod-chown-wsl-improvements/">Chmod/Chown WSL Improvements</a><br>  <a href="https://learn.microsoft.com/zh-tw/archive/blogs/wsl/wsl-file-system-support">WSL File System Support</a><br>  <strong>DrvFs</strong><br>    To facilitate interoperability with Windows, WSL uses the DrvFs file system. WSL automatically mounts all fixed drives with supported file systems under /mnt, such as /mnt/c, /mnt/d, etc. Currently, only NTFS and ReFS volumes are supported.<br>    (window) C:\work\db ← → (WSL) /mnt/c/work/db</p>
</blockquote>
<h3 id="Solution-1-volume"><a href="#Solution-1-volume" class="headerlink" title="Solution 1 : volume"></a>Solution 1 : volume</h3><img src="/2023/09/10/Docker-volumes-Problem-onUbuntu-on-WSL2/2.png" width="80%" height="80%" alt="inconsistency_between_database_and_cache">


<p>Use volumes which are completely managed by Docker to solve this problem.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  <span class="attr">db_mysql:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./db_context</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile-db-mysql</span></span><br><span class="line">    <span class="attr">env_file:</span> <span class="string">.env</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$&#123;DB_DATA_PATH_MYSQL&#125;:/var/lib/mysql&quot;</span></span><br><span class="line">    <span class="attr">command:</span>  <span class="string">--transaction-isolation=READ-COMMITTED</span> <span class="string">--socket=/tmp/mysql.sock</span> <span class="string">--sql_mode=&quot;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3316</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">docker_network:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">172.16</span><span class="number">.238</span><span class="number">.6</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">db_mysql</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"> <span class="attr">mysql:</span></span><br></pre></td></tr></table></figure>

<p>WSL2 Ubuntu</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker-compose up build</span><br><span class="line">$ docker <span class="built_in">exec</span> -it db_mysql bash</span><br><span class="line">root@fdg453:/<span class="comment"># mysql -h 127.0.0.1 -u test -p</span></span><br><span class="line">Enter password : test123</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>

<p>Also, you may encounter other problems likes :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld: [Warning] World-writable config file &#39;&#x2F;etc&#x2F;mysql&#x2F;conf.d&#x2F;my.cnf&#39; is ignored.</span><br></pre></td></tr></table></figure>

<p>After mount file systems into WSL2 from Window, my.cnf file permissions were changed to 777 from 744. Docker daemon copies files from the host to the container verbatim, inluding numeric user ids, resulting inmy.cnfwith file permissions 777 in docker container. Mysql’s security mechanism ignores the file because of insecure read and write permissions. We need to change permissions of <code>my.cnf</code>.</p>
<p>Consider below methods to fix:</p>
<ol>
<li>Chmod in DockerFile : <a href="https://denibertovic.com/posts/handling-permissions-with-docker-volumes/">Fixing World-writable MySql error in Docker, HANDLING PERMISSIONS WITH DOCKER VOLUMES</a></li>
<li>Modified file permissions on host before Docker daemon copy it into container.</li>
</ol>
<p>Modified file permissions for target file on WSL2 ubuntu</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/mnt/c/work/db_context<span class="comment"># ls -al</span></span><br><span class="line">total 0</span><br><span class="line">drwxrwxrwx 1 xxx xxx 512 Mar 25 16:20 .</span><br><span class="line">drwxrwxrwx 1 xxx xxx 512 Mar 28 12:12 ..</span><br><span class="line">-rwxrwxrwx 1 xxx xxx  49 Mar 25 16:20 Dockerfile-db-mysql</span><br><span class="line">-rw-r--r-- 1 xxx xxx 389 Mar 17 11:28 my.cnf</span><br><span class="line">/mnt/c/work/db_context<span class="comment"># chmod 644 my.cnf</span></span><br><span class="line">/mnt/c/work/db_context<span class="comment"># ls -al</span></span><br><span class="line">total 0</span><br><span class="line">drwxrwxrwx 1 xxx xxx 512 Mar 25 16:20 .</span><br><span class="line">drwxrwxrwx 1 xxx xxx 512 Mar 28 12:12 ..</span><br><span class="line">-rwxrwxrwx 1 xxx xxx  49 Mar 25 16:20 Dockerfile-db-mysql</span><br><span class="line">-rw-r--r-- 1 xxx xxx 389 Mar 17 11:28 my.cnf</span><br></pre></td></tr></table></figure>


<h3 id="Solution-2-bind-mount-wsl-conf"><a href="#Solution-2-bind-mount-wsl-conf" class="headerlink" title="Solution 2 : bind mount + wsl.conf"></a>Solution 2 : bind mount + wsl.conf</h3><img src="/2023/09/10/Docker-volumes-Problem-onUbuntu-on-WSL2/3.png" width="80%" height="80%" alt="inconsistency_between_database_and_cache">

<p>Add wsl.conf with metadataautomount options to support Linux system permissions in WSL2.(MicrosoftDocs/WSLPublic)</p>
<p>WSL2 ubuntu</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># login root</span></span><br><span class="line">$ sudo -i</span><br><span class="line">$ <span class="built_in">cd</span> /etc/</span><br><span class="line"><span class="comment"># create wsl.conf</span></span><br><span class="line">$ vim wsl.conf</span><br></pre></td></tr></table></figure>

<p>wsl.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[automount]</span><br><span class="line">options &#x3D; &quot;metadata&quot;</span><br></pre></td></tr></table></figure>

<p>restart WSL2 (Using PowerShell)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ wsl --shutdown</span><br><span class="line">$ wsl</span><br><span class="line"><span class="comment"># start docker</span></span><br><span class="line">$ service docker start</span><br><span class="line"><span class="comment"># restart your mysql project</span></span><br><span class="line">$ docker-compose up</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>WSL2</tag>
      </tags>
  </entry>
  <entry>
    <title>Encoding: Character Encoding, URL Encoding and Base64 Encoding</title>
    <url>/2023/09/07/Encoding-Character-Encoding-URL-Encoding-and-Base64-Encoding/</url>
    <content><![CDATA[<h1 id="Character-Encoding"><a href="#Character-Encoding" class="headerlink" title="Character Encoding"></a><strong>Character Encoding</strong></h1><p>Computers only can understand binary. If we want to process text, we must first convert the text to binary before computers can process it.</p>
<h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a><strong>ASCII</strong></h2><p>In the early days of the internet, we didn’t need to worry about any characters other than english. We use <a href="https://en.wikipedia.org/wiki/ASCII">American Standard Code for Information Interchange (ASCII)</a> , one byte (eight bits), to map a-z, A-Z , 0–9 and some control characters.</p>
<p>As you can imagine, there are hundreds of languages in the world. one byte is not enough for some language like Chinese or Japanese. Each country has its own standards, result in garbled characters displayed in multi-language mixed text.</p>
<a id="more"></a>

<h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a><strong>Unicode</strong></h2><p>Unicode is sometimes called the <a href="https://en.wikipedia.org/wiki/Universal_Coded_Character_Set">Universal Coded Character Set</a> (UCS), or even ISO/IEC 10646. Unicode is made up of lots of code points (mapping lots of characters from around the world to a key that all computers can reference.) A collection of code points is called a character set, which is what Unicode is. Unicode unifies all languages into one set of codes, so that there will be no more garbled characters.</p>
<h2 id="Unicode-Transform-Protocol-UTF"><a href="#Unicode-Transform-Protocol-UTF" class="headerlink" title="Unicode Transform Protocol (UTF)"></a><strong>Unicode Transform Protocol (UTF)</strong></h2><p>UTF is a way we encode Unicode code points. The UTF encodings are defined by the Unicode standard, and are able to encode every single Unicode code point we need.</p>
<p>There are different types of UTF standards. They differ depending on the amount of bytes used to encode one code point. It also depends on whether you’re using UTF-8 (one byte per code point), UTF-16 (two bytes per code point) or UTF-32 (four bytes per code point).</p>
<p>To signal which Unicode character encoding (UTF-8, UTF-16, UTF-32) is used, <a href="https://en.wikipedia.org/wiki/Byte_order_mark">Byte order mark (BOM)</a> is a two-byte marker at the beginning of a text that indicate what encoding is used.</p>
<h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a><strong>UTF-8</strong></h2><p>UTF-8 encodes all the Unicode code points from 0–127 in 1 byte (the same as ASCII). UTF encoding that converts Unicode encoding into “variable length character encoding” depend on the character you want to display. English letters are encoded into 1 byte ( 8 bits, the minimum number of bits that a UTF-8 code point will be) . Chinese and Japanese characters are are represented with 3 bytes. Some very rare characters will be encoded into 4–6 bytes. UTF-8 encoding can save space when transmitting and saving.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  character   |     ASCII     |    Unicode(UCS-16)  |      UTF-8</span><br><span class="line">--------------|---------------|---------------------|-------------------</span><br><span class="line">      A       |    01000001   |   00000000 01000001 |     01000001</span><br></pre></td></tr></table></figure>

<h2 id="HTML-charset-Attribute"><a href="#HTML-charset-Attribute" class="headerlink" title="HTML charset Attribute"></a><strong>HTML charset Attribute</strong></h2><p>To display an HTML page correctly, a web browser must know the character set used in the page. This is specified in the <code>&lt;meta&gt;</code> tag:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Text-Storage"><a href="#Text-Storage" class="headerlink" title="Text Storage"></a><strong>Text Storage</strong></h2><p>Unicode encoding is uniformly used in computer memory. When we need to store text on disk or transmitted over internet, text is converted to UTF-8 encoding (may be other encoding, depend on your Operating System or encoding method) for space saving. When open file , the encoding text are converted to Unicode characters in memory.</p>
<blockquote>
<p>How can I see which encoding is used in a file</p>
<p><em>You can not really automatically find out whether a file was written with encoding X originally.</em></p>
<p><em>What you can easily do though is to verify whether the complete file can be successfully decoded somehow (but not necessarily correctly) using a specific codec. If you find any bytes that are not valid for a given encoding, it must be something else.</em></p>
<p><em>The problem is that many codecs are similar and have the same “valid byte patterns”, just interpreting them as different characters.</em></p>
</blockquote>
<h1 id="URL-Encoding"><a href="#URL-Encoding" class="headerlink" title="URL Encoding"></a><strong>URL Encoding</strong></h1><p>A URL (Uniform Resource Locator) is the address of a resource in the world wide web. URLs have a well-defined structure which was formulated in <a href="https://tools.ietf.org/html/rfc1738">RFC 1738</a> . A URL is composed from characters including digits (0–9), letters(A-Z, a-z), and a few special characters ( “-”, “.”, “_”, “~”). If we want to transmit any character which is not a member of the above mentioned (unsafe characters like space, , &lt;, &gt;, {, } , reserved characters like ?, /, #, :), we need to encode them so that web browsers can accept and understand. URL encoding is also called percent encoding since it uses percent sign (<code>%</code>) as an escape character.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.example.com?name&#x3D;@Test&amp;phone&#x3D;88888888</span><br><span class="line"></span><br><span class="line">          encode value part in params       |</span><br><span class="line">                                           \|?</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;www.example.com?name&#x3D;%40Test&amp;phone&#x3D;%2B919999999999</span><br></pre></td></tr></table></figure>

<h1 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a><strong>Base64</strong></h1><p>Base64 is a group of similar binary-to-text encoding schemes that represent binary data in an ASCII string format by translating it into a radix-64 representation. Base64 encoding schemes are commonly used when there is a need to encode binary data that needs to be stored and transferred over media that are designed to deal with ASCII. This is to ensure that the data remain intact without modification during transport. The resultant string of base 64 encoded data is always larger than the original. Another important distinction is that base 64 does not encrypt any information.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h1><ul>
<li><a href="https://www.freecodecamp.org/news/everything-you-need-to-know-about-encoding/">Unicode Characters — What Every Developer Must Know About Encoding</a></li>
<li><a href="https://blog.miniasp.com/post/2021/08/05/Character-Encoding-Problems-for-Windows-and-Linux">分享幾個在 Windows 與 Linux 常見的編碼問題與解決方案</a></li>
<li><a href="https://stackoverflow.com/questions/2152738/why-do-you-need-to-encode-urls">Why do you need to encode URLs?</a></li>
<li><a href="https://www.urlencoder.io/learn/">What is URL Encoding and How does it work?</a></li>
<li><a href="https://stackoverflow.com/questions/3538021/why-do-we-use-base64">Why do we use Base64?</a></li>
<li><a href="https://bunny.net/academy/http/what-is-base64-encoding-and-decoding/">What is Base 64 Encoding?</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Base64">Base64</a></li>
</ul>
]]></content>
      <categories>
        <category>encoding</category>
      </categories>
      <tags>
        <tag>encoding</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang CSP: Channel And Gorutine</title>
    <url>/2023/12/20/Golang-CSP-Channel-And-Gorutine/</url>
    <content><![CDATA[<p>In Go (Golang), channels and goroutines are key components of the language’s concurrency model, which is inspired by Communicating Sequential Processes (CSP). CSP is a formal language for describing patterns of interaction in concurrent systems. The main ideas of CSP include processes communicating by sending and receiving messages over channels, and synchronization through communication rather than through shared memory.<br>Channels in Go are a communication mechanism designed to allow one goroutine to safely send data to another goroutine in concurrent or multi-goroutine scenarios.</p>
<a id="more"></a>
<blockquote>
<p>Do not communicate by sharing memory; instead, share memory by communicating.</p>
</blockquote>
<h2 id="Channels"><a href="#Channels" class="headerlink" title="Channels"></a>Channels</h2><p><a href="https://github.com/golang/go/blob/master/src/runtime/chan.go">chan.go</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> hchan <span class="keyword">struct</span> &#123;</span><br><span class="line">	qcount   <span class="keyword">uint</span>           <span class="comment">// total data in the queue</span></span><br><span class="line">	dataqsiz <span class="keyword">uint</span>           <span class="comment">// size of the circular queue</span></span><br><span class="line">	buf      unsafe.Pointer <span class="comment">// points to an array of dataqsiz elements</span></span><br><span class="line">	elemsize <span class="keyword">uint16</span></span><br><span class="line">	closed   <span class="keyword">uint32</span></span><br><span class="line">	elemtype *_type <span class="comment">// element type</span></span><br><span class="line">	sendx    <span class="keyword">uint</span>   <span class="comment">// send index</span></span><br><span class="line">	recvx    <span class="keyword">uint</span>   <span class="comment">// receive index</span></span><br><span class="line">	recvq    waitq  <span class="comment">// list of recv waiters</span></span><br><span class="line">	sendq    waitq  <span class="comment">// list of send waiters</span></span><br><span class="line">	lock mutex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2023/12/20/Golang-CSP-Channel-And-Gorutine/channel_structure.jpg" width="100%" height="100%" title="image" alt="channel_structure">


<h3 id="UnBuffered-Channels"><a href="#UnBuffered-Channels" class="headerlink" title="UnBuffered Channels"></a>UnBuffered Channels</h3><p>By default channels are unbuffered, meaning that they will only accept sends (chan &lt;-) if there is a corresponding receive (&lt;- chan) ready to receive the sent value. It enforces a synchronous communication between the two goroutines involved in the communication</p>
<ol>
<li>The producers and consumers of a channel appear in pairs, but both within the same goroutine. <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">  c &lt;- <span class="string">&quot;hello&quot;</span> <span class="comment">// block for ever</span></span><br><span class="line">  msg := &lt;-c</span><br><span class="line">  fmt.Println(msg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">fatal error: all goroutines are asleep - deadlock!</span></span><br><span class="line"><span class="comment">goroutine 1 [chan send]:</span></span><br><span class="line"><span class="comment">main.main()</span></span><br><span class="line"><span class="comment">  /tmp/sandbox3222265902/prog.go:9 +0x36</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="2">
<li><p>The producers and consumers of a channel operate in pairs but within different goroutines.</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  ms := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(c <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    c &lt;- <span class="string">&quot;hello&quot;</span></span><br><span class="line">  &#125;(ms)</span><br><span class="line">  msg := &lt;-ms</span><br><span class="line">  fmt.Println(msg)  <span class="comment">// hello</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Unbuffered channels are useful in scenarios where synchronization between two goroutines since it ensure that the sender and receiver are ready to communicate at the same time.</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">  dog  = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">  cat  = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">  fish = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">  wg   sync.WaitGroup</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Dog</span><span class="params">()</span></span> &#123;</span><br><span class="line">  &lt;-dog</span><br><span class="line">  fmt.Println(<span class="string">&quot;dog&quot;</span>)</span><br><span class="line">  cat &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Cat</span><span class="params">()</span></span> &#123;</span><br><span class="line">  &lt;-cat</span><br><span class="line">  fmt.Println(<span class="string">&quot;cat&quot;</span>)</span><br><span class="line">  fish &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fish</span><span class="params">()</span></span> &#123;</span><br><span class="line">  &lt;-fish</span><br><span class="line">  fmt.Println(<span class="string">&quot;fish&quot;</span>)</span><br><span class="line">  dog &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">    wg.Add(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="keyword">defer</span> wg.Done()</span><br><span class="line">      Dog()</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="keyword">defer</span> wg.Done()</span><br><span class="line">      Cat()</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="keyword">defer</span> wg.Done()</span><br><span class="line">      Fish()</span><br><span class="line">    &#125;()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Start the cycle</span></span><br><span class="line">  dog &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line"></span><br><span class="line">  wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// A fatal error occurred at the end of the process due to the absence of any receiver for the last message sent on the unbuffered channel &#x27;fish&#x27;.</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">dog</span></span><br><span class="line"><span class="comment">cat</span></span><br><span class="line"><span class="comment">fish</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">dog</span></span><br><span class="line"><span class="comment">cat</span></span><br><span class="line"><span class="comment">fish</span></span><br><span class="line"><span class="comment">fatal error: all goroutines are asleep - deadlock!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="4">
<li>In some scenarios like timeout control, may lead to memory leak.<ul>
<li>If there is no timeout, <code>doLongTask</code> signals the unbuffered channel <code>done</code>, and the <code>select</code> statement receives the signal. Consequently, <code>doLongTask</code> and the child coroutine can exit gracefully.</li>
<li>When a timeout occurs, the <code>select</code> statement receives the timeout signal from <code>time.After</code> and returns. Since unbuffered channel <code>done</code> has no receiver at this point, and <code>doLongTask</code> sends a signal to channel <code>done</code> after 1 second of execution, the sender will be blocked indefinitely due to the lack of a receiver and no buffer, preventing the coroutine from exiting.<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doLongTask</span><span class="params">(done <span class="keyword">chan</span> <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">  time.Sleep(time.Second) <span class="comment">// long task</span></span><br><span class="line">  done &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">timeout</span><span class="params">(f <span class="keyword">func</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span>) <span class="title">error</span></span> &#123;</span><br><span class="line">  done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>) <span class="comment">// unbuffered channel</span></span><br><span class="line">  <span class="keyword">go</span> f(done)</span><br><span class="line">  <span class="comment">// If there is no default statement in the select statement, it will block and wait for any of the case statements.</span></span><br><span class="line">  <span class="keyword">select</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> &lt;-done:</span><br><span class="line">    fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">case</span> &lt;-time.After(time.Millisecond):</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;timeout&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestDoLongTask</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">    timeout(doLongTask)</span><br><span class="line">  &#125;</span><br><span class="line">  time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">  t.Log(runtime.NumGoroutine())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestDoLongTask</span></span><br><span class="line"><span class="comment">    prog_test.go:38: 1002</span></span><br><span class="line"><span class="comment">--- PASS: TestDoLongTask (3.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ol>
<h3 id="Buffered-Channels"><a href="#Buffered-Channels" class="headerlink" title="Buffered Channels"></a>Buffered Channels</h3><p>Golang provides buffered channels, which allow you to specify a fixed length of buffer capacity so one can send that number of data values at once. These channels are only blocked when the buffer is full.</p>
<ol>
<li>To prevent memory leaks, utilize buffered channels to avoid the sender from being blocked, even in the absence of a receiver. <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doLongTask</span><span class="params">(done <span class="keyword">chan</span> <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">  time.Sleep(time.Second) <span class="comment">// long task</span></span><br><span class="line">  done &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">timeout</span><span class="params">(f <span class="keyword">func</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span>) <span class="title">error</span></span> &#123;</span><br><span class="line">  done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">1</span>) <span class="comment">// buffered channel</span></span><br><span class="line">  <span class="keyword">go</span> f(done)</span><br><span class="line">  <span class="comment">// If there is no default statement in the select statement, it will block and wait for any of the case statements.</span></span><br><span class="line">  <span class="keyword">select</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> &lt;-done:</span><br><span class="line">    fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">case</span> &lt;-time.After(time.Millisecond):</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;timeout&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestDoLongTask</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">    timeout(doLongTask)</span><br><span class="line">  &#125;</span><br><span class="line">  time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">  t.Log(runtime.NumGoroutine())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestBufferTimeout</span></span><br><span class="line"><span class="comment">    prog_test.go:34: 2</span></span><br><span class="line"><span class="comment">--- PASS: TestBufferTimeout (3.00s)</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<h3 id="Select-Statement"><a href="#Select-Statement" class="headerlink" title="Select Statement"></a>Select Statement</h3><p><code>select</code> statement is used to deal with multiple communication operations. It allows a goroutine to wait on multiple communication operations and proceed as soon as one of them can proceed. This is particularly useful when working with channels to handle concurrent communication and synchronization.<br>  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  taskCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;First stage started...&quot;</span>)</span><br><span class="line">    time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">    fmt.Println(<span class="string">&quot;First stage ending...&quot;</span>)</span><br><span class="line">    <span class="built_in">close</span>(taskCh)</span><br><span class="line">  &#125;()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Wait for the first segment of a task to complete or timeout using the select statement</span></span><br><span class="line">  <span class="keyword">select</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> &lt;-taskCh:</span><br><span class="line">    fmt.Println(<span class="string">&quot;First stage completed. Continuing with the next stages...&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> &lt;-time.After(<span class="number">1</span> * time.Second):</span><br><span class="line">    fmt.Println(<span class="string">&quot;Timeout occurred. Aborting further stages.&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fmt.Println(<span class="string">&quot;Second stage started...&quot;</span>)</span><br><span class="line">  time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">  fmt.Println(<span class="string">&quot;Second stage ending...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://github.com/golang/go/blob/master/src/runtime/select.go#L121">selectgo</a></p>
<ol>
<li>The select statement in Go is a specialized statement used exclusively for sending and receiving messages on channels. This statement is blocking during execution. When there is no case statement in the select, it will block the current goroutine.</li>
<li>select is Go’s language-level mechanism for I/O multiplexing. It is specifically designed to detect whether multiple channels are ready: either for reading or writing.</li>
<li>In the select statement, except for default, each case operates on a single channel, either for reading or writing.</li>
<li>In the select statement, except for default, the execution order of each case is random.</li>
<li>If there is no default statement in the select statement, it will block and wait for any of the case statements.</li>
<li>In the select statement, when performing a read operation, it is necessary to check whether the read was successful. Closed channels can also be read in the select statement.</li>
</ol>
<h3 id="Channel-Operations"><a href="#Channel-Operations" class="headerlink" title="Channel Operations"></a>Channel Operations</h3><h4 id="1-Sending-Data-chan-lt"><a href="#1-Sending-Data-chan-lt" class="headerlink" title="1. Sending Data (chan &lt;-)"></a>1. Sending Data (chan &lt;-)</h4><ul>
<li>If the receiving queue (recvq) is not empty, it signifies an absence of data in the buffer or the absence of a buffer. In such a scenario, retrieve a Goroutine (G) from recvq, write the data, awaken G, and conclude the sending process.</li>
<li>If there is space available in the buffer, write the data into the buffer, concluding the sending process.</li>
<li>If the buffer has no available space, write the data to be sent into G, add the current G to the sending queue (sendq), enter a sleep state, and await awakening by a reading</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chansend</span><span class="params">(c *hchan, ep unsafe.Pointer, block <span class="keyword">bool</span>, callerpc <span class="keyword">uintptr</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  lock(&amp;c.lock)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ** Send to a closed channel cause panic **</span></span><br><span class="line">  <span class="keyword">if</span> c.closed != <span class="number">0</span> &#123;</span><br><span class="line">    unlock(&amp;c.lock)</span><br><span class="line">    <span class="built_in">panic</span>(plainError(<span class="string">&quot;send on closed channel&quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ** Dequeuing from Receiver Queue **</span></span><br><span class="line">  <span class="keyword">if</span> sg := c.recvq.dequeue(); sg != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// Found a waiting receiver. We pass the value we want to send</span></span><br><span class="line">    <span class="comment">// directly to the receiver, bypassing the channel buffer (if any).</span></span><br><span class="line">    send(c, sg, ep, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; unlock(&amp;c.lock) &#125;, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ** Enqueuing to Channel Buffer **</span></span><br><span class="line">  <span class="keyword">if</span> c.qcount &lt; c.dataqsiz &#123;</span><br><span class="line">    <span class="comment">// Space is available in the channel buffer. Enqueue the element to send.</span></span><br><span class="line">    qp := chanbuf(c, c.sendx)</span><br><span class="line">    <span class="keyword">if</span> raceenabled &#123;</span><br><span class="line">      racenotify(c, c.sendx, <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    typedmemmove(c.elemtype, qp, ep)</span><br><span class="line">    c.sendx++</span><br><span class="line">    <span class="keyword">if</span> c.sendx == c.dataqsiz &#123;</span><br><span class="line">      c.sendx = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    c.qcount++</span><br><span class="line">    unlock(&amp;c.lock)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ** Block on the channel if is allowed, it then enqueues the current goroutine(mysg) to the send queue (c.sendq) and parks the goroutine (gopark). This means the goroutine will be put to sleep until a receiver completes the operation. **</span></span><br><span class="line">  gp := getg()</span><br><span class="line">  mysg := acquireSudog()</span><br><span class="line">  mysg.releasetime = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> t0 != <span class="number">0</span> &#123;</span><br><span class="line">    mysg.releasetime = <span class="number">-1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  gp.waiting = mysg</span><br><span class="line">  gp.param = <span class="literal">nil</span></span><br><span class="line">  c.sendq.enqueue(mysg)</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// ** Ensure the value being sent is kept alive until the receiver copies it out. **</span></span><br><span class="line">  KeepAlive(ep)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// someone woke us up.</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-Receiving-Data-lt-chan"><a href="#2-Receiving-Data-lt-chan" class="headerlink" title="2. Receiving Data (&lt;- chan)"></a>2. Receiving Data (&lt;- chan)</h4><ul>
<li>If the waiting sending queue (sendq) is not empty and there is no buffer, directly retrieve a Goroutine (G) from sendq,  wake up G, end the reading process.</li>
<li>If the waiting sending queue (sendq) is not empty, indicating that the buffer is full, read data from the head of the buffer, write the data from G to the end of the buffer, wake up G, and  end the reading process.</li>
<li>If there is data in the buffer, retrieve the data from the buffer and end the reading process</li>
<li>If the waiting sending queue (sendq) and buffer are empty, add the current Goroutine to recvq, enter a sleep state, and await awakening by a writing Goroutine.</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chanrecv</span><span class="params">(c *hchan, ep unsafe.Pointer, block <span class="keyword">bool</span>)</span> <span class="params">(selected, received <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  lock(&amp;c.lock)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ** Read from a closed channel is allowed **</span></span><br><span class="line">  <span class="keyword">if</span> c.closed != <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> c.qcount == <span class="number">0</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> raceenabled &#123;</span><br><span class="line">        raceacquire(c.raceaddr())</span><br><span class="line">      &#125;</span><br><span class="line">      unlock(&amp;c.lock)</span><br><span class="line">      <span class="keyword">if</span> ep != <span class="literal">nil</span> &#123;</span><br><span class="line">        typedmemclr(c.elemtype, ep)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// The channel has been closed, but the channel&#x27;s buffer have data.</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Just found waiting sender with not closed.</span></span><br><span class="line">    <span class="keyword">if</span> sg := c.sendq.dequeue(); sg != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="comment">// Found a waiting sender. If buffer is size 0, receive value</span></span><br><span class="line">      <span class="comment">// directly from sender. Otherwise, receive from head of queue</span></span><br><span class="line">      <span class="comment">// and add sender&#x27;s value to the tail of the queue (both map to</span></span><br><span class="line">      <span class="comment">// the same buffer slot because the queue is full).</span></span><br><span class="line">      recv(c, sg, ep, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; unlock(&amp;c.lock) &#125;, <span class="number">3</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ** Dequeuing from Channel Buffer **</span></span><br><span class="line">  <span class="keyword">if</span> c.qcount &gt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="comment">// Receive directly from queue</span></span><br><span class="line">    qp := chanbuf(c, c.recvx)</span><br><span class="line">    <span class="keyword">if</span> raceenabled &#123;</span><br><span class="line">      racenotify(c, c.recvx, <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ep != <span class="literal">nil</span> &#123;</span><br><span class="line">      typedmemmove(c.elemtype, ep, qp)</span><br><span class="line">    &#125;</span><br><span class="line">    typedmemclr(c.elemtype, qp)</span><br><span class="line">    c.recvx++</span><br><span class="line">    <span class="keyword">if</span> c.recvx == c.dataqsiz &#123;</span><br><span class="line">      c.recvx = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    c.qcount--</span><br><span class="line">    unlock(&amp;c.lock)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// no sender available: block on this channel.</span></span><br><span class="line">  gp := getg()</span><br><span class="line">  mysg := acquireSudog()</span><br><span class="line">  mysg.releasetime = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> t0 != <span class="number">0</span> &#123;</span><br><span class="line">    mysg.releasetime = <span class="number">-1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  gp.waiting = mysg</span><br><span class="line">  gp.param = <span class="literal">nil</span></span><br><span class="line">  c.recvq.enqueue(mysg)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// someone woke us up</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>, success</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-Close-channel"><a href="#3-Close-channel" class="headerlink" title="3. Close channel"></a>3. Close channel</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">operation         | nil channel | closed channel     |</span><br><span class="line">------------------------------------------------------</span><br><span class="line">close(ch)         | panic       | panic              |</span><br><span class="line">------------------------------------------------------</span><br><span class="line">ch &lt;-             | blocking    | panic              |</span><br><span class="line">------------------------------------------------------</span><br><span class="line">v, ok := &lt;- ch    | blocking    | ok always be <span class="literal">false</span> |</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://go101.org/article/channel-closing.html">How to Gracefully Close Channels</a></p>
<ol>
<li>M receivers, one sender, the sender says “no more sends” by closing the data channel</li>
<li>One receiver, N senders, the only receiver says “please stop sending more” by closing an additional signal channel</li>
<li>M receivers, N senders, any one of them says “let’s end the game” by notifying a moderator to close an additional signal channel</li>
</ol>
<p>Solutions Which Close Channels Politely: Use sync.Once or a mutex (sync.Mutex) to ensure that the channel is closed only once</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MyChannel <span class="keyword">struct</span> &#123;</span><br><span class="line">  C    <span class="keyword">chan</span> T</span><br><span class="line">  once sync.Once</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMyChannel</span><span class="params">()</span> *<span class="title">MyChannel</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &amp;MyChannel&#123;C: <span class="built_in">make</span>(<span class="keyword">chan</span> T)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mc *MyChannel)</span> <span class="title">SafeClose</span><span class="params">()</span></span> &#123;</span><br><span class="line">  mc.once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">close</span>(mc.C)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>CSP</tag>
        <tag>Channel</tag>
        <tag>Gorutine</tag>
      </tags>
  </entry>
  <entry>
    <title>How to deploy a Kubernetes Job by client-go in cluster</title>
    <url>/2023/09/07/How-to-deploy-a-Kubernate-Job-by-client-go-in-cluster/</url>
    <content><![CDATA[<h1 id="Kubernets-API-Server"><a href="#Kubernets-API-Server" class="headerlink" title="Kubernets API Server"></a><strong>Kubernets API Server</strong></h1><p>The API server is a component of the Kubernetes control plane that exposes the Kubernetes API via HTTPS. It is the main management point of the entire cluster. To invoke this API, the client requests needs implement the correct auth(authentication and authorization). API server is also responsible for the authentication and authorization mechanism, processes REST operations, validates them, and updates the corresponding objects in Etcd. There are two main authentication mechanisms we can use handle the API Server auth, TLS/SSL Certificate-based auth(X509) and Token-based auth.</p>
<a id="more"></a>
<h1 id="Role-Based-Access-Control"><a href="#Role-Based-Access-Control" class="headerlink" title="Role-Based Access Control"></a><strong>Role-Based Access Control</strong></h1><p>In the Kubernetes cluster , the mechanism responsible for completing the authorization work is RBAC (Role-Based Access Control). RBAC defines policies for restricting and controlling user access to resources of a system by using roles attached to users. However, RBAC policies can also govern the behavior of software resources. A <em>service account</em> provides an identity for processes that run in a Pod, and maps to a ServiceAccount object. A secret with access token is generated when ServiceAccount object is deployed. After specify <code>serviceAccountName</code> with in a pod, the secret will mount into pod at <code>/var/run/secrets/kubernetes.io/serviceaccount</code> . The pod can access API Server with permissions defined in <code>serviceAccountName</code> .</p>
<p>RBAC authorizations can define permissions/policies that can be limited within a namespace(Role) or the entire cluster(ClusterRule).</p>
<img src="/2023/09/07/How-to-deploy-a-Kubernate-Job-by-client-go-in-cluster/1.png" width="100%" height="100%" alt="1">

<h1 id="ServiceAccountToken"><a href="#ServiceAccountToken" class="headerlink" title="ServiceAccountToken"></a><strong>ServiceAccountToken</strong></h1><p>Kubelet automatically mount a default ServiceAccount’s API credentials (ServiceAccountToken) in the same namespace as the pod is create without specifying a ServiceAccount. This allow pod to access API server incluster by ServiceAccountToken. You can opt out of automounting API credentials on <code>/var/run/secrets/kubernetes.io/serviceaccount/token</code> for a service account by setting <code>automountServiceAccountToken: false</code> on the ServiceAccount.</p>
<p>serviceAccount, Role, RoleBinding</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">service-account-jobs</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">job-operation</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>, <span class="string">&quot;batch&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;jobs&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;delete&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">job-operation</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-account-jobs</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">job-operation</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>

<p>deployment.yaml (program running in pod which want to access Kubernate API Server within cluster to deploy a Job)</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">program</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">program</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">program</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">service-account-jobs</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">program</span></span><br><span class="line">        <span class="attr">image:</span> &#123;&#123; <span class="string">.Values.program.image</span> &#125;&#125;</span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;bin/sh&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;-c&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;/go/bin/server -sql=/etc/sql/postgres.txt -worker-job=/etc/jobs/worker-job.yaml&quot;</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8081</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">postgre-sql</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/etc/sql</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">worker-job</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/etc/jobs</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">postgre-sql</span></span><br><span class="line">          <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">configs</span></span><br><span class="line">            <span class="attr">items:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">postgres.txt</span></span><br><span class="line">                <span class="attr">path:</span> <span class="string">postgres.txt</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">worker-job</span></span><br><span class="line">          <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">configs</span></span><br><span class="line">            <span class="attr">items:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">worker-job.yaml</span></span><br><span class="line">                <span class="attr">path:</span> <span class="string">worker-job.yaml</span></span><br></pre></td></tr></table></figure>

<p>configmap.yaml (render by helm, place to store Job template)</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">configs</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  &#123;&#123;<span class="bullet">-</span> <span class="string">.Files.Get</span> <span class="string">.Values.configmapStrings</span> <span class="string">|</span> <span class="string">nindent</span> <span class="number">2</span> &#125;&#125;</span><br><span class="line">  &#123;&#123;<span class="bullet">-</span> <span class="string">(.Files.Glob</span> <span class="string">.Values.configmapFiles).AsConfig</span> <span class="string">|</span> <span class="string">nindent</span> <span class="number">2</span> &#125;&#125;</span><br><span class="line">  &#123;&#123;<span class="bullet">-</span> <span class="string">(.Files.Glob</span> <span class="string">.Values.configmapJobsFiles).AsConfig</span> <span class="string">|</span> <span class="string">nindent</span> <span class="number">2</span> &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>local-values.yaml (render by helm)</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">configmapFiles:</span> <span class="string">&quot;configmaps/files/local/**&quot;</span></span><br><span class="line"><span class="attr">configmapStrings:</span> <span class="string">&quot;configmaps/strings/local.yaml&quot;</span></span><br><span class="line"><span class="attr">configmapJobsFiles:</span> <span class="string">&quot;configmaps/jobs/local/**&quot;</span></span><br></pre></td></tr></table></figure>

<p>Job template</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">worker</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">worker</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ttlSecondsAfterFinished:</span> <span class="number">100</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">worker</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">worker:target</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Never</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;bin/sh&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;-c&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;/go/bin/image_worker -sql=/etc/sql/postgres.txt -custom=$&#123;CUSTOM_ID&#125;&quot;</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">postgre-sql</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/etc/sql</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">postgre-sql</span></span><br><span class="line">          <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">configs</span></span><br><span class="line">            <span class="attr">items:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">postgres.txt</span></span><br><span class="line">                <span class="attr">path:</span> <span class="string">postgres.txt</span></span><br><span class="line">  <span class="attr">backoffLimit:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>Golang program read in Job template YAML as an parameter by golang flag and parse YAML to client-go Job spec. You can then customize Job setting. Beware that the InClusterConfig only work when running program within cluster.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> k8sutil</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;context&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;os&quot;</span></span><br><span class="line"> <span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line"> batchv1 <span class="string">&quot;k8s.io/api/batch/v1&quot;</span></span><br><span class="line"> metav1 <span class="string">&quot;k8s.io/apimachinery/pkg/apis/meta/v1&quot;</span></span><br><span class="line"> <span class="string">&quot;k8s.io/client-go/kubernetes&quot;</span></span><br><span class="line"> <span class="string">&quot;k8s.io/client-go/kubernetes/scheme&quot;</span></span><br><span class="line"> <span class="string">&quot;k8s.io/client-go/rest&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">connectToK8s</span><span class="params">()</span> <span class="params">(*kubernetes.Clientset, error)</span></span> &#123;</span><br><span class="line"> <span class="comment">// creates the in-cluster config</span></span><br><span class="line"> config, err := rest.InClusterConfig()</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;failed to create in-cluster cofig: %v&quot;</span>, err)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// creates the clientset</span></span><br><span class="line"> clientset, err := kubernetes.NewForConfig(config)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;failed to create k8s client set: %v&quot;</span>, err)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> clientset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">resolveJobTemplate</span><span class="params">(imageWorkerJobYamlPath <span class="keyword">string</span>)</span> <span class="params">(*batchv1.Job, error)</span></span> &#123;</span><br><span class="line"> <span class="comment">// read in k8s yaml file</span></span><br><span class="line"> b, err := os.ReadFile(imageWorkerJobYamlPath)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;failed to read job yaml file: %v&quot;</span>, err)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// deserialize k8s yaml to k8s object</span></span><br><span class="line"> decode := scheme.Codecs.UniversalDeserializer().Decode</span><br><span class="line"> obj, groupVersionKind, err := decode([]<span class="keyword">byte</span>(b), <span class="literal">nil</span>, <span class="literal">nil</span>)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;failed to decode yaml file to object: %v&quot;</span>, err)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> job *batchv1.Job</span><br><span class="line"> <span class="keyword">if</span> groupVersionKind.Kind == <span class="string">&quot;Job&quot;</span> &#123;</span><br><span class="line">  job = obj.(*batchv1.Job)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> job, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LaunchImageWorkerK8sJob luach a worker job with specific job name and customID</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LaunchImageWorkerK8sJob</span><span class="params">(ctx context.Context, jobName <span class="keyword">string</span>, customID <span class="keyword">string</span>, imageWorkerJobYamlPath <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"> <span class="comment">// resolve kubernate job template</span></span><br><span class="line"> jobSpec, err := resolveJobTemplate(imageWorkerJobYamlPath)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to resolve kubernate job template: %v&quot;</span>, err)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// connect to k8s</span></span><br><span class="line"> clientset, err := connectToK8s()</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to connect to kubernate: %v&quot;</span>, err)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// customize Job setting</span></span><br><span class="line"> <span class="comment">// job name setting</span></span><br><span class="line"> jobSpec.ObjectMeta.Name = jobName</span><br><span class="line"> <span class="comment">// replace customiD flag with target customID</span></span><br><span class="line"> commandWithFlag := jobSpec.Spec.Template.Spec.Containers[<span class="number">0</span>].Command[<span class="number">2</span>]</span><br><span class="line"> replaceCustomIDFlag := strings.Replace(commandWithFlag, <span class="string">&quot;$&#123;CUSTOM_ID&#125;&quot;</span>, customID, <span class="number">1</span>)</span><br><span class="line"> jobSpec.Spec.Template.Spec.Containers[<span class="number">0</span>].Command[<span class="number">2</span>] = replaceCustomIDFlag</span><br><span class="line"></span><br><span class="line"> namespace := jobSpec.Namespace</span><br><span class="line"></span><br><span class="line"> <span class="comment">// apply k8s job</span></span><br><span class="line"> jobs := clientset.BatchV1().Jobs(namespace)</span><br><span class="line"> jobDetail, err := jobs.Create(ctx, jobSpec, metav1.CreateOptions&#123;&#125;)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to create kubernete job: %v \n Job detail: %v&quot;</span>, err, jobDetail)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Reference</strong></p>
<ul>
<li><a href="https://stackoverflow.com/questions/50510381/creating-a-job-with-kubernetes-client-go">Creating a Job with Kubernetes client-go</a></li>
<li><a href="https://github.com/kubernetes/client-go/blob/master/examples/in-cluster-client-configuration/main.go">client-go/examples/in-cluster-client-configuration/main.go</a></li>
<li><a href="https://stackoverflow.com/questions/60885448/how-to-run-kubectl-within-a-job-in-a-namespace">How to run kubectl within a job in a namespace?</a></li>
<li><a href="https://github.com/kubernetes/client-go/issues/193">Support for parsing K8s yaml spec into client-go data structures #193</a></li>
<li><a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/">Authenticating</a></li>
<li><a href="https://stackoverflow.com/questions/34388593/how-to-enter-an-optional-flag-with-no-parameters-in-go-cli-program">How to enter an optional flag with no parameters in Go CLI program</a></li>
<li><a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/">Using RBAC Authorization</a></li>
<li><a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/">Configure Service Accounts for Pods</a></li>
<li><a href="https://medium.com/rahasak/kubernetes-http-api-with-authentication-and-authorization-c0cb7051114f">Kubernetes HTTP API with Authentication and Authorization</a></li>
<li><a href="https://kubernetes.io/docs/reference/access-authn-authz/kubelet-authn-authz/">Kubelet authentication/authorization</a></li>
<li><a href="https://iximiuz.com/en/posts/kubernetes-api-call-simple-http-client/">How To Call Kubernetes API using Simple HTTP Client</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>ServiceAccount</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Index Locking In MySQL8 with InnoDB</title>
    <url>/2023/09/07/Index-Locking-In-MySQL8-with-InnoDB/</url>
    <content><![CDATA[<h1 id="MySQL-data-structures-for-Index"><a href="#MySQL-data-structures-for-Index" class="headerlink" title="MySQL data structures for Index"></a><strong>MySQL data structures for Index</strong></h1><p><a href="https://dev.mysql.com/doc/refman/8.0/en/index-btree-hash.html">8.3.9 Comparison of B-Tree and Hash Indexes</a></p>
<p><a href="https://stackoverflow.com/questions/7306316/b-tree-vs-hash-table">B-Tree vs Hash Table</a></p>
<ul>
<li>Hash Table: You can only access elements by their primary key <code>O(1)</code>. When you select ranges (<em>everything in between <code>x</code> and <code>y</code></em>) can result in a full table scan <code>O(n)</code> . There may be a point where your index exceeds a tolerable size compared to your hash sizes and your entire index needs to be re-built.</li>
<li>Tree algorithms support ranges selecting in <em><code>log(n)</code></em> , elements accessing and inserting by their primary key in <em><code>log(n)</code></em> .<a id="more"></a>

</li>
</ul>
<p><strong><em>Related topic:</em></strong></p>
<ul>
<li>Page Splitting: Create a new table with<code>NOT NULL PRIMARY KEY AUTO_INCREMENT</code> to avoid vacancy in page(higher memory usage) and to ensure orderly insertion(higher performance).</li>
<li>Primary key type: The smaller the length of the primary key, result in smaller occupied space by the ordinary index(leaf nodes in Indexes other than the primary key → primary key).</li>
</ul>
<h1 id="MySQL-Clustered-and-Secondary-Indexes"><a href="#MySQL-Clustered-and-Secondary-Indexes" class="headerlink" title="MySQL Clustered and Secondary Indexes"></a><strong>MySQL Clustered and Secondary Indexes</strong></h1><blockquote>
<p>15.6.2.1 Clustered and Secondary Indexes</p>
<p><em>Each <code>InnoDB</code> table has a special index called the clustered index that stores row data. Typically, the clustered index is synonymous with the primary key.</em></p>
</blockquote>
<ul>
<li>Select by primary key → find in clustered index B+ tree → get the required data(row).</li>
<li>Select by Indexes other than the primary key → find in secondary index B+ tree→ get the primary key for data → find in clustered index B+ tree → get the required data(row).</li>
</ul>
<p><strong><em>Related topic:</em></strong></p>
<p><a href="https://www.red-gate.com/simple-talk/databases/sql-server/learn/using-covering-indexes-to-improve-query-performance/">Using Covering Indexes to Improve Query Performance</a></p>
<ul>
<li>Covering index: The covering index contains the data to be searched through include, so that the SQL query can get the required data without reaching the basic table.</li>
</ul>
<p><a href="https://www.mysqltutorial.org/mysql-index/mysql-prefix-index/">MySQL Prefix Index</a></p>
<ul>
<li>Prefix index: MySQL allows you to create an index for the leading part of the column values of the string columns using the following syntax: <code>column_name(length)</code> . Create a prefix index can save space, but may increase the number of query scans and make the Covering index useless.</li>
</ul>
<h1 id="MySQL-multiversion-concurrency-control-MVCC"><a href="#MySQL-multiversion-concurrency-control-MVCC" class="headerlink" title="MySQL multiversion concurrency control (MVCC)"></a><strong>MySQL multiversion concurrency control (MVCC)</strong></h1><p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-locking-reads.html">15.7.2.4 Locking Reads</a></p>
<ul>
<li>SELECT … FOR SHARE: Sets a shared mode lock on any rows that are read. Other sessions can read the rows, but cannot modify them until your transaction commits.</li>
<li>SELECT … FOR UPDATE: For index records the search encounters, locks the rows and any associated index entries, the same as if you issued an <code>UPDATE</code> statement for those rows.</li>
</ul>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/commit.html">13.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements</a></p>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-consistent-read.html">15.7.2.3 Consistent Nonlocking Reads</a></p>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-multi-versioning.html">15.3 InnoDB Multi-Versioning</a></p>
<ul>
<li>The snapshot of the database state applies to <code>[SELECT](https://dev.mysql.com/doc/refman/8.0/en/select.html)</code> statements within a transaction, not necessarily to <a href="https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_dml">DML</a> statements.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># suppose command below are in each transaction, REPEATABLE READ# Snapshot&#x2F;Consistent read, no lock (MVCC, redo log), each consistent read within a transaction sets and reads its own fresh snapshot.</span><br><span class="line">select * from table where id &#x3D; ?;</span><br><span class="line">-----------------------------------------------------------------# See the “freshest” state of the database, A SELECT blocks until the transaction containing the freshest rows ends.# set S lock</span><br><span class="line">select * from table where id &#x3D; ? for share;# set X lock</span><br><span class="line">select * from table where id &#x3D; ? for update;show engine innodb status;</span><br></pre></td></tr></table></figure>

<h1 id="MySQL-Lock"><a href="#MySQL-Lock" class="headerlink" title="MySQL Lock"></a><strong>MySQL Lock</strong></h1><h2 id="Lock-types-for-MySQL-server"><a href="#Lock-types-for-MySQL-server" class="headerlink" title="Lock types for MySQL server:"></a><strong>Lock types for MySQL server:</strong></h2><p><strong><em>1.Table Lock (</em></strong><a href="https://dev.mysql.com/doc/refman/8.0/en/lock-tables.html">13.3.6 LOCK TABLES and UNLOCK TABLES Statements</a>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOCK TABLES</span><br><span class="line">    tbl_name [[AS] alias] lock_type</span><br><span class="line">    [, tbl_name [[AS] alias] lock_type] ...lock_type: &#123;</span><br><span class="line">    READ [LOCAL]</span><br><span class="line">  | [LOW_PRIORITY] WRITE</span><br><span class="line">&#125;UNLOCK TABLES</span><br></pre></td></tr></table></figure>

<p>A session can release its table locks explicitly with <code>UNLOCK TABLES</code>. If the connection for a client session terminates, whether normally or abnormally, the server implicitly releases all table locks held by the session (transactional and nontransactional). Since InnoDB supports row-level locking, we rarely use LOCK TABLES command.</p>
<p><strong><em>2. MDL(Meta data lock) (</em></strong><a href="https://dev.mysql.com/doc/refman/8.0/en/metadata-locking.html">8.11.4 Metadata Locking</a>)</p>
<p>MDL is added automatically when accesses a table. MySQL uses metadata locking to manage concurrent access to database objects and to ensure data consistency. The server achieves this by acquiring metadata locks on tables used within a transaction and deferring release of those locks until the transaction ends. MDL read lock is added when you manipulate data in a table(DML — Data Manipulation Language). MDL read lock is added when you perform a Data Definition Language(DDL) operation or <code>LOCK TABLES</code> on a table.</p>
<ul>
<li>Meta data Read lock: Read locks are not mutually exclusive, so you can have multiple threads adding, deleting, modifying, and querying a table at the same time.</li>
<li>Meta data Write lock: Read-write locks and write locks are mutually exclusive to ensure the security of operations that change the table structure. Therefore, if two threads want to add fields to a table at the same time, one of them will not start executing until the other is finished.</li>
</ul>
<p><strong><em>Related topic:</em></strong></p>
<ul>
<li>Long transaction:</li>
</ul>
<ol>
<li>DML(<strong><em>MDL read</em></strong>) block DDL(<strong><em>MDL write</em></strong>): If session A operate a DML on table Z, the fellowing DDL operation on table Z will be blocked until transaction in session A completes. To solve this problem, check <code>innodb_trx</code> table in <code>information_schema</code> before DDL operation. Another solution is to set wait time in the DDL statement to avoid blocking fellow operation when fail in MDL acquirement. (<code>ALTER TABLE tbl_name WAIT N add column …</code>). The Performance Schema <code>[metadata_locks](https://dev.mysql.com/doc/refman/8.0/en/performance-schema-metadata-locks-table.html)</code> table exposes metadata lock information, which can be useful for seeing which sessions hold locks, are blocked waiting for locks, and so forth.</li>
<li>DDL(<strong><em>MDL write</em></strong>) block DML(<strong><em>MDL read</em></strong>)</li>
<li>DDL(<strong><em>MDL write</em></strong>) block DDL(<strong><em>MDL write</em></strong>)</li>
</ol>
<h2 id="Lock-type-for-MySQL-engine-InnoDB"><a href="#Lock-type-for-MySQL-engine-InnoDB" class="headerlink" title="Lock type for MySQL engine(InnoDB):"></a><strong>Lock type for MySQL engine(<code>InnoDB</code>):</strong></h2><p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html#innodb-gap-locks">15.7.1 InnoDB Locking</a></p>
<p><strong><em>Shared and Exclusive Locks</em></strong></p>
<p><code>InnoDB</code> implements standard row-level locking where there are two types of locks, shared (<code>S</code>) locks and exclusive (<code>X</code>) locks.</p>
<p><strong><em>Intention Locks</em></strong></p>
<p>Intention locks are table-level locks that indicate which type of lock (shared or exclusive) a transaction requires later for a row in a table. There are two types of intention locks:</p>
<ul>
<li>An intention shared lock (<code>IS</code>) indicates that a transaction intends to set a <em>shared</em> lock on individual rows in a table.</li>
<li>An intention exclusive lock (<code>IX</code>) indicates that a transaction intends to set an exclusive lock on individual rows in a table.</li>
</ul>
<p>The main purpose of intention locks is to directly determine whether there is a lock conflict based on whether the intention lock exists.</p>
<ul>
<li>Before a transaction can acquire a shared lock on a row in a table, it must first acquire an <code>IS</code> lock or stronger on the table.</li>
<li>Before a transaction can acquire an exclusive lock on a row in a table, it must first acquire an <code>IX</code> lock on the table.</li>
</ul>
<p><strong><em>1.Record Locks</em></strong></p>
<p>Record locks always lock index records, even if a table is defined with no indexes. For such cases, <code>InnoDB</code> creates a hidden clustered index and uses this index for record locking.</p>
<p><strong><em>2.Gap Locks</em></strong></p>
<p>A gap lock is a lock on a gap between index records, or a lock on the gap before the first or after the last index record. For example, <code>SELECT c1 FROM t WHERE c1 BETWEEN 10 and 20 FOR UPDATE;</code> prevents other transactions from inserting a value of <code>15</code> into column <code>t.c1</code>, whether or not there was already any such value in the column, because the gaps between all existing values in the range are locked.</p>
<ul>
<li>Gap locking is not needed for statements that lock rows using a unique index to search for a unique row. (This does not include the case that the search condition includes only some columns of a multiple-column unique index; in that case, gap locking does occur.).</li>
<li>Gap locks can co-exist. A gap lock taken by one transaction does not prevent another transaction from taking a gap lock on the same gap. There is no difference between shared and exclusive gap locks. They do not conflict with each other, and they perform the same function.</li>
<li>Gap locking can be disabled explicitly. This occurs if you change the transaction isolation level to <code>READ COMMITTED</code>(MySQL default transaction isolation level:<code>REPEATABLE READ</code> ) .Gap locks exist when the isolation level is <code>REPEATABLE READ</code> and <code>SERIALIZABLE.</code></li>
</ul>
<p><strong><em>3. Next-Key Locks</em></strong></p>
<p><a href="https://stackoverflow.com/questions/56828411/why-next-key-lock-is-called-this-way">Why Next-Key lock is called this way?</a></p>
<p>A next-key lock is a combination of a record lock on the index record and a gap lock on the <strong><em>gap</em> <em>before the index record</em></strong>.</p>
<p>By default, <code>InnoDB</code> operates in <code>REPEATABLE READ</code> transaction isolation level. In this case, <code>InnoDB</code> uses next-key locks for searches and index scans, which prevents phantom rows (see <a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-next-key-locking.html">Section 15.7.4, “Phantom Rows”</a>).</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;t&#96; (</span><br><span class="line">  &#96;pId&#96; int(10) NOT NULL,</span><br><span class="line">  &#96;name&#96; varchar(10) DEFAULT NULL,</span><br><span class="line">  &#96;num&#96; int(10) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;pId&#96;),</span><br><span class="line">  KEY &#96;num&#96; (&#96;num&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB;covering index: num</span><br><span class="line">primary index: pId------------------------------------</span><br><span class="line">pId(int) | name(varchar) | num(int)</span><br><span class="line">---------|---------------|----------</span><br><span class="line"> 2       |      Atom     |   55</span><br><span class="line">---------|---------------|----------</span><br><span class="line"> 5       |      Bom      |   22</span><br><span class="line">---------|---------------|----------</span><br><span class="line"> 9       |     Cindy     |   33</span><br><span class="line">------------------------------------select * from table where name &#x3D; &#96;Bom&#96; for update;</span><br><span class="line"> --&gt; scan all clustered index(pid) in table</span><br><span class="line"> --&gt; addRecord Lockson clustered index 2, 5, 9</span><br><span class="line"> --&gt; addGap Lockson clustered index (-∞,2)(2,5)(5,9)(9,+∞)select * from table where pid &#x3D; 2 for update;</span><br><span class="line"> --&gt; scan pid &#x3D; 2 on clustered index(pid) in table</span><br><span class="line"> --&gt; addRecord Lockson clustered index 2select * from table where pid &#x3D; 7 for update;</span><br><span class="line"> --&gt; scan pid &#x3D; 7 on clustered index(pid) in table, not exist</span><br><span class="line"> --&gt; addGap Lockson clustered index (5, 9)select * from table where num &#x3D; 33 for share;</span><br><span class="line"> --&gt; scan secondary index(num) in table</span><br><span class="line"> --&gt; addRecord Lockson secondary index 33</span><br><span class="line"> --&gt; addGap Lockson secondary index (22,33)(33,55)select * from table where num &#x3D; 33 for update;</span><br><span class="line"> --&gt; scan secondary index(num) in table</span><br><span class="line"> --&gt; addRecord Lockson secondary index 33</span><br><span class="line"> --&gt; addGap Lockson secondary index (22,33)(33,55)</span><br><span class="line"> --&gt; scan clustered index(pid) by secondary index 33 in table</span><br><span class="line"> --&gt; addRecord Lockson clustered index 9</span><br></pre></td></tr></table></figure>

<p><strong><em>Related topic:</em></strong></p>
<ul>
<li>Long transaction.</li>
<li>Dead lock:</li>
</ul>
<ol>
<li>set <code>innodb_lock_wait_timeout</code> to avoid long blocking.</li>
<li><code>innodb_deadlock_detect = on</code> If a deadlock is found, roll back a transaction in the deadlock chain to let other transactions continue to execute.</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes Ingress and Services troubleshooting</title>
    <url>/2023/09/10/Kubernetes-Ingress-and-Services-troubleshooting/</url>
    <content><![CDATA[<ul>
<li><p>Traffic flow: Internet → Ingress controller rule (according to your Ingress YAML) → Service → Pods</p>
</li>
<li><p>Debug flow: Pods → Service → Ingress → Ingress controller → Internet</p>
</li>
</ul>
<h2 id="Check-the-Deployment-amp-Pods"><a href="#Check-the-Deployment-amp-Pods" class="headerlink" title="Check the Deployment &amp; Pods"></a>Check the Deployment &amp; Pods</h2><ol>
<li>Makes sure that the Pod is up and running (Pod’s “Status” is “Running”). If not, checks the Deployment/Pod Resource Events and log to fix the problem.</li>
<li>If you are using HTTP GET livenessProbe, ensure your Service and Ingress are deployed beforehand.<a id="more"></a>

</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ kubectl get deployment -n &lt;namespace&gt;</span><br><span class="line"><span class="comment"># logs of deployment</span></span><br><span class="line">$ kubectl logs deployment/&lt;name-of-deployment&gt; -n &lt;namespace&gt;</span><br><span class="line"><span class="comment"># follow logs of deployment, ctrl+c to quit</span></span><br><span class="line">$ kubectl logs -f deployment/&lt;name-of-deployment&gt; -n &lt;namespace&gt;</span><br><span class="line"><span class="comment"># check &quot;Events&quot; at bottom of the output</span></span><br><span class="line">$ kubectl describe deployment &lt;name-of-deployment&gt; -n &lt;namespace&gt;</span><br><span class="line"></span><br><span class="line">$ kubectl get pods -n &lt;namespace&gt;</span><br><span class="line">$ kubectl logs pod/&lt;name-of-pod&gt; -n &lt;namespace&gt;</span><br><span class="line">$ kubectl describe pod &lt;name-of-pod&gt; -o wide -n &lt;namespace&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Check-the-port-mapping"><a href="#Check-the-port-mapping" class="headerlink" title="Check the port mapping"></a>Check the port mapping</h2><img src="/2023/09/10/Kubernetes-Ingress-and-Services-troubleshooting/1.png" width="80%" height="80%" alt="1">

<blockquote>
<p><a href="https://kubernetes.io/docs/concepts/services-networking/ingress/">Ingress</a><br>    - An Ingress may be configured to give Services externally-reachable URLs, load balance traffic, terminate SSL / TLS, and offer name-based virtual hosting. An Ingress controller is responsible for fulfilling the Ingress, usually with a load balancer, though it may also configure your edge router or additional frontends to help handle the traffic.<br>    - An Ingress does not expose arbitrary ports or protocols. Exposing services other than HTTP and HTTPS to the internet typically uses a service of type Service.Type=NodePort or Service.Type=LoadBalancer.</p>
</blockquote>
<h2 id="Check-the-Service"><a href="#Check-the-Service" class="headerlink" title="Check the Service"></a>Check the Service</h2><ol>
<li>Checks the “Endpoints” field in Service, which should match the “IP” of Pods.</li>
<li>If you are using public cloud like GKE, AKS…, you can modify the Service Types to LoadBalancer to expose your Service publicly without ingress. If this work for you, meaning that your Pods and Service work correctly, problems are cause by others.<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ kubectl get service -n &lt;namespace&gt;</span><br><span class="line">$ kubectl describe service &lt;name-of-pod&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Check-the-Ingress-amp-Ingress-Controller-Logs-and-Resource-Events"><a href="#Check-the-Ingress-amp-Ingress-Controller-Logs-and-Resource-Events" class="headerlink" title="Check the Ingress &amp; Ingress Controller Logs and Resource Events"></a>Check the Ingress &amp; Ingress Controller Logs and Resource Events</h2><blockquote>
<p><a href="https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/">Ingress Controllers</a><br>    - In order for the Ingress resource to work, the cluster must have an ingress controller running.<br>    - Unlike other types of controllers which run as part of the kube-controller-manager binary, Ingress controllers are not started automatically with a cluster in public cloud like GKE, AKS…. You need to choose the ingress controller implementation that best fits your cluster.<br>    - Ingress Controller in AKS is AKS Application Gateway Ingress Controller ,which is ingress-appgw-deployment below. The ingress controller runs as a pod within the AKS cluster. It consumes Kubernetes Ingress Resources and converts them to an Azure Application Gateway configuration which allows the gateway to load-balance traffic to Kubernetes pods.</p>
</blockquote>
<ol>
<li><p>Checks your Ingress for any Event or error log</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ kubectl get ingress -n &lt;namespace&gt;</span><br><span class="line">$ kubectl describe ingress &lt;name-of-ingress&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>Checks your ingress controller configuration to see if it’s rule match the ingress you just apply.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">λ kubectl get deployment  -n kube-system</span><br><span class="line">NAME                       READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">ingress-appgw-deployment   1/1     1            1           48d</span><br><span class="line">...</span><br><span class="line">$ kubectl get pods -n kube-system</span><br><span class="line">NAME                                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">azure-cni-networkmonitor-2fmfk              1/1     Running   0          7d5h</span><br><span class="line">...</span><br><span class="line">azure-ip-masq-agent-6k4rm                   1/1     Running   0          3d5h</span><br><span class="line">...</span><br><span class="line">coredns-84d976c568-pjt8q                    1/1     Running   1          86d</span><br><span class="line">...</span><br><span class="line">ingress-appgw-deployment-7b8b687b46-scvs7   1/1     Running   315        3d5h</span><br><span class="line">kube-proxy-4c6qw                            1/1     Running   0          7d5h</span><br><span class="line">...</span><br><span class="line">metrics-server-569f6547dd-j2wjz             1/1     Running   5          86d</span><br><span class="line">...</span><br><span class="line">$ kubectl describe pod ingress-appgw-deployment-7b8b687b46-scvs7 -n kube-system</span><br></pre></td></tr></table></figure>

<p> Finally figure out that the problem is caused by Ingress controller fail to convert Ingress YAML to Azure Application Gateway configuration while you update your Ingress YAML or Pod Service endpoint, including livenessProbe.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ kubectl logs -f -n kube-system ingress-appgw-deployment-7b8b687b46-scvs7 | grep --color=always -i error</span><br><span class="line">E0110 03:19:02.123462       1 requestroutingrules.go:386] A path-rule with path <span class="string">&#x27;/merchant/*&#x27;</span> already exists <span class="keyword">in</span> config <span class="keyword">for</span> BackendPool <span class="string">&#x27;/subscriptions/49fc9d19-f517-4ca5-a93e-76ed0fbd0ab1/resourceGroups/xxx/providers/Microsoft.Network/applicationGateways/aks-gw/backendAddressPools/defaultaddresspool&#x27;</span>. Duplicate path-rule with BackendPool <span class="string">&#x27;/subscriptions/49fc9d19-f517-4ca5-a93e-76ed0fbd0ab1/resourceGroups/xxx/providers/Microsoft.Network/applicationGateways/aks-gw/backendAddressPools/pool-payment-payment-svc-80-bp-80&#x27;</span> will not be applied</span><br></pre></td></tr></table></figure>
</li>
<li><p>Restart Ingress Controller</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ kubectl rollout restart deployment &lt;your-ingress-controller-deployment&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>For AKS Application Gateway, check:<br>    - <a href="https://learn.microsoft.com/en-us/azure/application-gateway/application-gateway-probe-overview">Application Gateway health monitoring overview</a><br>    - <a href="https://learn.microsoft.com/en-us/azure/application-gateway/application-gateway-create-probe-portal">Create a custom probe for Application Gateway by using the portal</a></p>
</blockquote>
<h2 id="Reason-for-Application-Gateway-failure"><a href="#Reason-for-Application-Gateway-failure" class="headerlink" title="Reason for Application Gateway failure"></a>Reason for Application Gateway failure</h2><p>The reasons that may cause Application Gateway fail to monitor and apply Ingress configuration.</p>
<ol>
<li><p>Using HTTPS without a Secret that contains a TLS private key and certificate. If you are using let’s encrypt to automatically produce secret file with tls.crt and tls.key with kubernates.io/tls type, make sure it hasn’t block by your your AKS firewall, which will result in wrong type of Secret(Opaque).</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">testsecret-tls</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">tls.crt:</span> <span class="string">base64</span> <span class="string">encoded</span> <span class="string">cert</span></span><br><span class="line">  <span class="attr">tls.key:</span> <span class="string">base64</span> <span class="string">encoded</span> <span class="string">key</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">kubernetes.io/tls</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>redirecting problem</p>
<p> <a href="https://stackoverflow.com/questions/42101808/ingress-gives-502-error">Ingress gives 502 error</a></p>
<p> noticing that the application must return a 200 status code at ‘/’. if your application was returning a 302 (redirect to login), which would cause the health fail. When the health check fails, the ingress resource returns 502.</p>
</li>
<li><p>Backend path rule conflict.</p>
<p> If you specify the backend-path-prefix in Ingress, make sure it did not conflict your backend resource Deployment livenessProbe path prefix.</p>
<p> Deployment</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line">        <span class="attr">livenessProbe:</span></span><br><span class="line">          <span class="attr">httpGet:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/payment_resource/healthcheck.jsp</span></span><br><span class="line">            <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">180</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">timeoutSeconds:</span> <span class="number">3</span></span><br><span class="line">          <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">          <span class="attr">successThreshold:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p> Ingress</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-payment</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">payment</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">appgw.ingress.kubernetes.io/backend-path-prefix:</span> <span class="string">/payment_resource/</span></span><br><span class="line">    <span class="attr">appgw.ingress.kubernetes.io/connection-draining:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    <span class="attr">appgw.ingress.kubernetes.io/connection-draining-timeout:</span> <span class="string">&#x27;30&#x27;</span></span><br><span class="line">    <span class="attr">appgw.ingress.kubernetes.io/cookie-based-affinity:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    <span class="attr">appgw.ingress.kubernetes.io/ssl-redirect:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    <span class="attr">cert-manager.io/cluster-issuer:</span> <span class="string">letsencrypt-production</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.allow-http:</span> <span class="string">&#x27;false&#x27;</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">azure/application-gateway</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">xxx.xxx.xxx.azure.com</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">aks-ingress-cert</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">xxx.xxx.xxx.azure.com</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/payment/*</span></span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">ImplementationSpecific</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">payment-svc</span></span><br><span class="line">                <span class="attr">port:</span></span><br><span class="line">                  <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>
<p> Visit <a href="https://xxx.xxx.xxx.azure.com/payment/healthcheck.jsp">https://xxx.xxx.xxx.azure.com/payment/healthcheck.jsp</a> , which would redirect to backend resource endpoint <a href="https://xxx.xxx.xxx.azure.com/payment_resource/healthcheck.jsp">https://xxx.xxx.xxx.azure.com/payment_resource/healthcheck.jsp</a> .</p>
</li>
</ol>
<blockquote>
<p><a href="https://azure.github.io/application-gateway-kubernetes-ingress/annotations/">Backend Path Prefix</a><br>This annotation allows the backend path specified in an ingress resource to be re-written with prefix specified in this annotation. This allows users to expose services whose endpoints are different than endpoint names used to expose a service in an ingress resource.</p>
</blockquote>
<p><a href="https://stacksimplify.com/azure-aks/azure-kubernetes-service-ingress-context-path-routing/">Ingress — Context Path Based Routing</a></p>
<img src="/2023/09/10/Kubernetes-Ingress-and-Services-troubleshooting/2.png" width="80%" height="80%" alt="2">]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes, debug</tag>
      </tags>
  </entry>
  <entry>
    <title>How to troubleshooting k8s pods and containers</title>
    <url>/2023/09/16/how-to-troubleshooting-k8s-pods-and-containers/</url>
    <content><![CDATA[<h2 id="hold-on-program-by-tail-f-dev-null"><a href="#hold-on-program-by-tail-f-dev-null" class="headerlink" title="hold on program by tail -f /dev/null"></a>hold on program by <code>tail -f /dev/null</code></h2><p>The command “tail -f /dev/null” is a Unix/Linux command that is often used as a placeholder or a trick to prevent a command or a script from exiting or terminating.</p>
<a id="more"></a>

<p>The tail command is typically used to display the last few lines of a file. When used with the -f option, it enables “follow” mode, where tail will continuously display new lines appended to the file in real-time. However, when tail -f is used with /dev/null, which is a special file that discards all data written to it, the command essentially does nothing. /dev/null is commonly used as a bit bucket or a sink for unwanted output.</p>
<p>So, in essence, running the command “tail -f /dev/null” will cause the tail command to start and keep running indefinitely, but it won’t display any output because /dev/null discards everything written to it. It’s often used as a placeholder command to prevent scripts or programs from exiting or to keep a terminal session open without any active output.</p>
<h3 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h3><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">command: [<span class="string">&quot;tail&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;/dev/null&quot;</span>]</span><br></pre></td></tr></table></figure>

<h4 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">my-container</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">my-image:tag</span></span><br><span class="line">  <span class="attr">command:</span> [<span class="string">&quot;tail&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;/dev/null&quot;</span>]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>NOTE<br>  Keep in mind that while ENTRYPOINT defines the default command in dockerfile, it can be overridden by providing commands in the Kubernetes pod. This means that if you specify a command  <code>tail -f /dev/null</code> within the pod, the container within it will be held up by the provided command, and any commands specified in the ENTRYPOINT won’t be executed.</p>
</blockquote>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown</title>
    <url>/2020/10/09/markdown/</url>
    <content><![CDATA[<h1 id="Markdown標題"><a href="#Markdown標題" class="headerlink" title="Markdown標題"></a>Markdown標題</h1><p>Using <a href="https://typora.io/">Typora Editor</a></p>
<h1 id="大標題："><a href="#大標題：" class="headerlink" title="大標題："></a>大標題：</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#＋空格＋標題＋enter	(beware of that &#39;#&#39; must type in English)</span><br></pre></td></tr></table></figure>

<h2 id="二級標題"><a href="#二級標題" class="headerlink" title="二級標題"></a>二級標題</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##＋空格＋二級標題＋enter</span><br></pre></td></tr></table></figure>

<h3 id="三級標題"><a href="#三級標題" class="headerlink" title="三級標題"></a>三級標題</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">###＋空格＋二級標題＋enter</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h2 id="字體"><a href="#字體" class="headerlink" title="字體"></a>字體</h2><p><strong>Hello World!</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Hello World!**  #粗體字	</span><br><span class="line">#(beware of that &#39;*&#39; must type in English)</span><br></pre></td></tr></table></figure>

<p><em>Hello World!</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*Hello World!* 	#斜體字</span><br></pre></td></tr></table></figure>

<p><strong><em>Hello World!</em></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">***Hello World!*** 	#粗體＋斜體</span><br></pre></td></tr></table></figure>

<p><del>Hello World!</del></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~~Hello World!~~	#刪除線</span><br></pre></td></tr></table></figure>

<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;＋空格		#引用</span><br></pre></td></tr></table></figure>

<h2 id="分割線"><a href="#分割線" class="headerlink" title="分割線"></a>分割線</h2><hr>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---+Enter		#分割線</span><br><span class="line">#or</span><br><span class="line">***+Enter		#分割線</span><br></pre></td></tr></table></figure>

<h2 id="連結、圖片"><a href="#連結、圖片" class="headerlink" title="連結、圖片"></a>連結、圖片</h2><p>image from online —<br>![圖片名稱](online path)</p>
<p>image from Destop —<br>直接把圖檔拉到Typora中要放的位置，會顯示：<br>![image-name](image path from desktop)<br>建議修改成相對路徑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">├── file for image</span><br><span class="line">│   └── imagename.png</span><br><span class="line">└── Markdown file</span><br><span class="line"></span><br><span class="line">---&gt; ![image-name](.&#x2F;image&#x2F;imagename.png)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;.&quot; 代表當前所在目錄，相對路徑</span><br><span class="line">&quot;..&quot; 代表上一層目錄，相對路徑。</span><br><span class="line">&quot;..&#x2F;..&#x2F;&quot; 代表的是上一層目錄的上一層目錄，相對路徑</span><br><span class="line">&quot;&#x2F;&quot; 代表根目錄,絕對路徑</span><br><span class="line"></span><br><span class="line">在使用相對路徑時，我們用符號“.”來表示當前目錄；用符號“..”來表示當前目錄的父目錄。</span><br></pre></td></tr></table></figure>

<p><a href="%E6%96%87%E7%AB%A0%E8%B7%AF%E5%BE%91">文章名稱</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[文章名稱]((文章路徑)</span><br></pre></td></tr></table></figure>



<h2 id="列表"><a href="#列表" class="headerlink" title="#列表"></a>#列表</h2><ol>
<li>a</li>
<li>b</li>
<li>c</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">number+.+空格</span><br><span class="line">enter+enter &#x3D; finish列表	#only work when there is no word urder</span><br><span class="line"></span><br><span class="line">ex:</span><br><span class="line">	1. apple</span><br><span class="line">	2. orange</span><br><span class="line">		 enter+enter --&gt; has word urder this line --&gt; won&#39;t work	 </span><br><span class="line"></span><br><span class="line">		 I won&#39;t let you stop the list</span><br><span class="line">	3. enter+enter --&gt; no word urder --&gt; finish the list</span><br><span class="line">next line start here</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>a</li>
<li>b</li>
<li>c</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-+空格</span><br><span class="line">enter+enter &#x3D; finish列表	#only work when there is no word urder</span><br></pre></td></tr></table></figure>

<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>方法ㄧ：</p>
<table>
<thead>
<tr>
<th>1</th>
<th>2</th>
<th>3</th>
</tr>
</thead>
<tbody><tr>
<td>a</td>
<td>b</td>
<td>c</td>
</tr>
</tbody></table>
<p>1|2|3|</p>
<p>–|–|–|</p>
<p>a|b|c|</p>
<p>檢視 –&gt; 原始碼模式 –&gt; 刪除行內空格</p>
<p>方法二：</p>
<p>段落 —&gt; 插入表格</p>
<h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">···（最左上）＋程式語言+Enter</span><br></pre></td></tr></table></figure>

<h2 id="文字調亮"><a href="#文字調亮" class="headerlink" title="文字調亮"></a>文字調亮</h2><p>Markdown不支持，採用HTML</p>
<p><span style="color:red">some <strong>This is Red Bold.</strong> text</span></p>
<p><span style="color:orange">some <em>This is Blue italic.</em> text</span></p>
<p><mark>Marked text</mark></p>
<p><span style="background-color: #FFFF00">Marked text</span></p>
<p>HTML Color Names <a href="https://www.w3schools.com/colors/colors_names.asp">https://www.w3schools.com/colors/colors_names.asp</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Practical Experiences with Modern Databases</title>
    <url>/2024/06/12/Practical-Experiences-with-Modern-Databases/</url>
    <content><![CDATA[<p>In today’s rapidly evolving tech landscape, working with modern databases is crucial for designing scalable and efficient systems. This session explores practical experiences and real-world applications of various modern databases, including both SQL and NoSQL solutions.</p>
<a id="more"></a>

<h2 id="DeadLock-in-Transaction"><a href="#DeadLock-in-Transaction" class="headerlink" title="DeadLock in Transaction"></a>DeadLock in Transaction</h2><p>Prevention:</p>
<ol>
<li><p><strong>Order Resource Acquisition Consistently:</strong><br>Ensure that resources are acquired in a consistent order across transactions to avoid circular wait conditions.</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Transaction 1 (T1):</span><br><span class="line">update(Resource A)</span><br><span class="line">update(Resource B)</span><br><span class="line"></span><br><span class="line">Transaction 2 (T2):</span><br><span class="line">update(Resource A)</span><br><span class="line">update(Resource B)</span><br></pre></td></tr></table></figure>
<p> In this example, both T1 and T2 acquire Resource A first, ensuring there is no circular wait condition:</p>
<ul>
<li><p>T1 acquires Resource A and waits for Resource B.</p>
</li>
<li><p>T2 acquires Resource B and waits for Resource A.</p>
<p>Execute table or row operations in a consistent order within transactions to avoid deadlocks between different transactions.</p>
<p>For more information on PostgreSQL lock monitoring and handling lock waits, refer to:</p>
</li>
<li><p><a href="https://pganalyze.com/blog/5mins-postgres-lock-monitoring-lwlock-log-lock-waits">5mins of Postgres E25: Postgres lock monitoring, LWLocks and the log_lock_waits setting</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/35319597/how-to-stop-kill-a-query-in-postgresql">How to stop/kill a query in postgresql?</a></p>
</li>
</ul>
</li>
<li><p><strong>Implement a Timeout Mechanism:</strong><br>Use a timeout mechanism to abort transactions that have been waiting too long, preventing long waits and potential deadlocks. For example, set <code>context.WithTimeout</code> in Golang for the root context.</p>
</li>
<li><p><strong>Move Query Operations Outside of Transactions if Possible:</strong><br>Whenever possible, perform query operations outside of transactions to reduce the risk of deadlocks. Additionally, shorten the duration of transactions.</p>
</li>
<li><p><strong>Avoid Long Transaction</strong></p>
</li>
</ol>
<h2 id="Time-and-Timezone-In-Database"><a href="#Time-and-Timezone-In-Database" class="headerlink" title="Time and Timezone In Database"></a>Time and Timezone In Database</h2><p><strong>Timestamp Format</strong></p>
<ul>
<li>Store Timestamps in UTC:<br>  It ensures consistency and avoids complications arising from daylight saving time changes and other timezone-related issues.</li>
<li>Set the Database Timezone to UTC:<br>  If your database system allows setting the timezone, setting it to UTC can enforce consistency and avoid unexpected behavior in date and time functions.</li>
<li>Handle Timezones at the Application Level:<br>  Manage timezone conversions within your application. Store timestamps in UTC in the database and convert to the appropriate local time zone when needed for display or user interactions</li>
</ul>
<p><strong>Epoch Format</strong></p>
<ul>
<li>Epoch time, representing the number of seconds (or milliseconds) since a fixed point (1970-01-01 00:00:00 UTC), can be more efficient for storage and quicker for comparison operations. However, since epoch time does not inherently include time zone information or formatting, it should only be used if your application is completely time zone independent.<h2 id="Default-Connection-Limit"><a href="#Default-Connection-Limit" class="headerlink" title="Default Connection Limit"></a>Default Connection Limit</h2></li>
</ul>
<p>For microservices, it is crucial to be aware that each service has a default connection limit for both the database server and the client. As the number of services increases, you may encounter bottlenecks because all available connections can become occupied.</p>
<p>Use PostgreSQL as an example</p>
<ul>
<li><p><strong>Client Side:</strong><br>If you are using an ORM package, it may provide relevant settings for the client service.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ex: gorm:</span><br><span class="line">  sqlDB.SetMaxIdleConns(defaultMaxIdleConn)</span><br><span class="line">  sqlDB.SetMaxOpenConns(defaultMaxOpenConn)</span><br><span class="line">  sqlDB.SetConnMaxLifetime(defaultLifetime)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Server Side:</strong></p>
<ul>
<li><a href="https://stackoverflow.com/questions/30778015/how-to-increase-the-max-connections-in-postgres">How to increase the max connections in postgres?</a></li>
<li><a href="https://www.postgresql.org/docs/current/runtime-config-connection.html#RUNTIME-CONFIG-CONNECTION">20.3. Connections and Authentication</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">max_connections (integer) </span><br><span class="line">Determines the maximum number of concurrent connections to the database server. The default is typically 100 connections.</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Using-Shorter-Keys-in-Indexes"><a href="#Using-Shorter-Keys-in-Indexes" class="headerlink" title="Using Shorter Keys in Indexes"></a>Using Shorter Keys in Indexes</h2><p>Using shorter keys in B-Tree indexes offers multiple benefits, including improved performance, efficient memory and storage usage, and better cache utilization.</p>
<p>  <strong>MySQL B+ Tree Indexes:</strong><br>  MySQL uses B+ Tree indexes, which are a variation of B-Tree indexes with additional optimizations. These indexes ensure that all values are stored at the leaf level and linked in a doubly linked list, enhancing range query performance and efficiency.</p>
<p>  <strong>PostgreSQL B-Tree Indexes:</strong><br>  PostgreSQL utilizes B-Tree indexes to efficiently manage and query large datasets. The structure and operation of these indexes can be explored in detail in the PostgreSQL documentation:<br>  <a href="https://www.postgresql.org/docs/current/btree-implementation.html#:~:text=PostgreSQL%20B%2DTree%20indexes%20are,leaf%20pages%20or%20internal%20pages">PostgreSQL B-Tree Implementation doc</a></p>
<h2 id="Materialized-Views-Views-for-Frequently-Used-Join-Queries"><a href="#Materialized-Views-Views-for-Frequently-Used-Join-Queries" class="headerlink" title="Materialized-Views/Views for Frequently Used Join Queries."></a>Materialized-Views/Views for Frequently Used Join Queries.</h2><p>Views</p>
<ul>
<li>By encapsulating frequently used queries, views ensure consistent results and reduce the need for query repetition. They can be reused across different parts of the application.<br><a href="https://stackoverflow.com/questions/2454113/why-is-database-view-used"><strong>Why is database view used?</strong></a></li>
<li>Notice: Views do not store data themselves; instead, they dynamically retrieve data from the underlying tables each time they are accessed.</li>
</ul>
<p>Materialized views</p>
<ul>
<li>A materialized view is a database object that contains the results of a query. Unlike a regular view, the result of the query is stored in the database, occupying physical space. This can improve query performance by providing quick access to precomputed and joined results.</li>
<li>Notice: Since materialized views store data physically, they are not suitable for real-time data, frequent data changes, or when storage is a concern.</li>
</ul>
<h2 id="Database-Parameter-Limits"><a href="#Database-Parameter-Limits" class="headerlink" title="Database Parameter Limits"></a>Database Parameter Limits</h2><p>When dealing with large datasets, there’s a risk of hitting database parameter limits, which can cause performance bottlenecks. By dividing large operations into smaller chunks, systems can avoid hitting these limits while maintaining performance and scalability.</p>
<ul>
<li><p><strong>PostgreSQL</strong><br><a href="https://klotzandrew.com/blog/postgres-passing-65535-parameter-limit">Passing the Postgres 65535 parameter limit at 120x speed</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gorm provide CreateInBatches function to dividing large operations into smaller chunks</span></span><br><span class="line"><span class="comment">// CreateInBatches insert the value in batches of batchSize</span></span><br><span class="line">CreateInBatches(value <span class="keyword">interface</span>&#123;&#125;, batchSize <span class="keyword">int</span>) DB</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>MSSQL</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// define mssql parameter limit, not to exceed query limit 2100</span></span><br><span class="line">MSSQL_PARAMETER_LIMIT = <span class="number">2048</span></span><br><span class="line"><span class="comment">// ChunkSlice chunk slice into chunks with size</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ChunkSlice</span><span class="params">(slice []<span class="keyword">int64</span>, chunkSize <span class="keyword">int</span>)</span> [][]<span class="title">int64</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> chunks [][]<span class="keyword">int64</span></span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(slice); i += chunkSize &#123;</span><br><span class="line">    end := i + chunkSize</span><br><span class="line">    <span class="comment">// necessary check to avoid slicing beyond</span></span><br><span class="line">    <span class="comment">// slice capacity</span></span><br><span class="line">    <span class="keyword">if</span> end &gt; <span class="built_in">len</span>(slice) &#123;</span><br><span class="line">      end = <span class="built_in">len</span>(slice)</span><br><span class="line">    &#125;</span><br><span class="line">    chunks = <span class="built_in">append</span>(chunks, slice[i:end])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> chunks</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line">chunks := common.ChunkSlice(req.GetIds(), common.MSSQL_PARAMETER_LIMIT)</span><br><span class="line"><span class="keyword">for</span> _, chunk := <span class="keyword">range</span> chunks &#123;</span><br><span class="line">  <span class="comment">// query restored student plan IDs are all in same school plan</span></span><br><span class="line">  <span class="keyword">var</span> users []*db.Users</span><br><span class="line">  <span class="keyword">if</span> err := s.db.WithContext(ctx).Model(&amp;db.Users&#123;&#125;).Where(<span class="string">&quot;id IN (?) AND deleted=0&quot;</span>, chunk).Scan(&amp;users).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, errors.Errorf(<span class="string">&quot;failed to query users by ids, err: %v&quot;</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ... fellowing operation</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Composite-Indexes-to-Avoid-Bookmark-Lookup"><a href="#Composite-Indexes-to-Avoid-Bookmark-Lookup" class="headerlink" title="Composite Indexes to Avoid Bookmark Lookup"></a>Composite Indexes to Avoid Bookmark Lookup</h2><p><a href="https://learn.microsoft.com/en-us/sql/relational-databases/indexes/clustered-and-nonclustered-indexes-described?view=sql-server-ver16">Clustered and nonclustered indexes</a></p>
<p>When a non-clustered index is used to locate rows, the database engine first searches the non-clustered index to find the indexed columns. If the query needs columns not included in the index, the engine then performs a bookmark lookup to retrieve the rest of the row’s data from the clustered index.</p>
<p>A composite index includes multiple columns from the table. If a query’s SELECT clause or WHERE clause references all the columns in the composite index, the database engine can satisfy the query using just the index without needing to perform a bookmark lookup.</p>
<p>ex:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> composite_index_name</span><br><span class="line"><span class="keyword">ON</span> table_name (column1, column2);</span><br></pre></td></tr></table></figure>

<h2 id="Using-Indexes-to-Optimize-Fuzzy-Search-Queries"><a href="#Using-Indexes-to-Optimize-Fuzzy-Search-Queries" class="headerlink" title="Using Indexes to Optimize Fuzzy Search Queries"></a>Using Indexes to Optimize Fuzzy Search Queries</h2><p>Fuzzy search refers to queries that are used to find records that match a pattern, typically using the LIKE operator in SQL. Using indexes to optimize fuzzy search queries can be a bit challenging, especially if the pattern starts with a wildcard (e.g., %pattern). However, there are strategies to make it more efficient:</p>
<ul>
<li>Trigrams:<br>Trigrams are a way to break down a text into substrings of three characters. By indexing these trigrams, you can perform more efficient fuzzy searches.<br><a href="https://www.postgresql.org/docs/current/pgtrgm.html">pg_trgm — support for similarity of text using trigram matching</a><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> EXTENSION pg_trgm;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> trgm_idx_users_username <span class="keyword">ON</span> <span class="keyword">users</span> <span class="keyword">USING</span> gin (username gin_trgm_ops);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Avoid-Generating-Temporary-Tables-for-Small-Joins"><a href="#Avoid-Generating-Temporary-Tables-for-Small-Joins" class="headerlink" title="Avoid Generating Temporary Tables for Small Joins"></a>Avoid Generating Temporary Tables for Small Joins</h2><p>When performing a join between tables that are not large, it is generally advisable to avoid generating temporary tables by selecting columns in the join condition.</p>
<p>  <strong>PostgreSQL</strong><br>  <a href="https://www.crunchydata.com/blog/get-started-with-explain-analyze">Explaining Your Postgres Query Performance</a></p>
<p>  <strong>MSSQL</strong></p>
<ul>
<li><p><strong>generate temporary tables</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> SHOWPLAN_XML <span class="keyword">ON</span>;</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Your query here</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    users.*, </span><br><span class="line">    a.auth_id, </span><br><span class="line">    a.auth_deleted, </span><br><span class="line">    a.auth_create_user, </span><br><span class="line">    a.auth_create_time, </span><br><span class="line">    a.auth_belong_to</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    <span class="keyword">users</span></span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        a.id <span class="keyword">AS</span> auth_id,</span><br><span class="line">        a.plan_id <span class="keyword">AS</span> auth_plan_id,</span><br><span class="line">        a.user_id <span class="keyword">AS</span> auth_user_id,</span><br><span class="line">        a.role <span class="keyword">AS</span> auth_role,</span><br><span class="line">        a.belong_to <span class="keyword">AS</span> auth_belong_to,</span><br><span class="line">        a.deleted <span class="keyword">AS</span> auth_deleted,</span><br><span class="line">        a.create_user <span class="keyword">AS</span> auth_create_user,</span><br><span class="line">        a.create_time <span class="keyword">AS</span> auth_create_time</span><br><span class="line">    <span class="keyword">FROM</span> </span><br><span class="line">        auths a</span><br><span class="line">    <span class="keyword">WHERE</span> </span><br><span class="line">        a.plan_id = <span class="number">3</span> </span><br><span class="line">        <span class="keyword">AND</span> a.role = <span class="number">6</span> </span><br><span class="line">        <span class="keyword">AND</span> a.deleted = <span class="number">0</span> </span><br><span class="line">        <span class="keyword">AND</span> a.belong_to = <span class="number">3794</span></span><br><span class="line">) <span class="keyword">AS</span> a </span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">    a.auth_user_id = users.id</span><br><span class="line"><span class="keyword">WHERE</span>  </span><br><span class="line">    users.role = <span class="number">6</span> </span><br><span class="line">    <span class="keyword">AND</span> users.school_code = <span class="string">&#x27;014666&#x27;</span>;</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> SHOWPLAN_XML <span class="keyword">OFF</span>;</span><br><span class="line">GO</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<img src="/2024/06/12/Practical-Experiences-with-Modern-Databases/join_table_1.png" width="100%" height="100%" title="join_table_1" alt="join_table_1">
</li>
<li><p><strong>no temporary tables are generated</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> SHOWPLAN_XML <span class="keyword">ON</span>;</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Your query here</span></span><br><span class="line"><span class="keyword">select</span> u.id, u.name, u.email, a.*</span><br><span class="line">        <span class="keyword">from</span> <span class="keyword">users</span> u</span><br><span class="line">        <span class="keyword">left</span> <span class="keyword">join</span> auths a <span class="keyword">ON</span> a.user_id=u.id <span class="keyword">and</span> a.plan_id=<span class="number">3</span> <span class="keyword">and</span> a.role=u.role <span class="keyword">and</span> a.deleted=<span class="number">0</span> <span class="keyword">and</span> a.belong_to=<span class="number">3794</span></span><br><span class="line">        <span class="keyword">where</span> u.role=<span class="number">6</span> <span class="keyword">and</span> u.school_code=<span class="string">&#x27;014666&#x27;</span>;</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> SHOWPLAN_XML <span class="keyword">OFF</span>;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>
<img src="/2024/06/12/Practical-Experiences-with-Modern-Databases/join_table_2.png" width="100%" height="100%" title="join_table_2" alt="join_table_2">
</li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>PostgreSQL</tag>
        <tag>MSSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Implement Custom GORM Logger</title>
    <url>/2024/06/13/How-to-Implement-Custom-GORM-Logger/</url>
    <content><![CDATA[<p>GORM is a powerful ORM library for Go, widely used for database interactions. While GORM provides default logging capabilities, there are scenarios where you might need more customized logging solutions to suit your application’s requirements.</p>
<a id="more"></a>

<ol>
<li><p>Implement the interface</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line">  LogMode(LogLevel) Interface</span><br><span class="line">  Info(context.Context, <span class="keyword">string</span>, ...<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">  Warn(context.Context, <span class="keyword">string</span>, ...<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">  Error(context.Context, <span class="keyword">string</span>, ...<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">  Trace(ctx context.Context, begin time.Time, fc <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(sql <span class="keyword">string</span>, rowsAffected <span class="keyword">int64</span>)</span>, <span class="title">err</span> <span class="title">error</span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> implementation</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> orm</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;context&quot;</span></span><br><span class="line">  <span class="string">&quot;strings&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">  log <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line">  <span class="string">&quot;gorm.io/gorm/logger&quot;</span></span><br><span class="line">  gorm_util <span class="string">&quot;gorm.io/gorm/utils&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UserUIDKey = <span class="string">&quot;user_uid&quot;</span></span><br><span class="line"><span class="keyword">const</span> slowThreshold = <span class="number">200</span> * time.Millisecond</span><br><span class="line"></span><br><span class="line"><span class="comment">// CustomGormLogger defines custom gorm logger</span></span><br><span class="line"><span class="keyword">type</span> CustomGormLogger <span class="keyword">struct</span> &#123; </span><br><span class="line">  logger logger.Interface</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewCustomGormLogger new a gorm custom logger instance</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCustomGormLogger</span><span class="params">()</span> *<span class="title">CustomGormLogger</span></span> &#123;  </span><br><span class="line">  <span class="keyword">return</span> &amp;CustomGormLogger&#123;  </span><br><span class="line">    logger: logger.Default,</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LogMode log mode</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *CustomGormLogger)</span> <span class="title">LogMode</span><span class="params">(lev logger.LogLevel)</span> <span class="title">logger</span>.<span class="title">Interface</span></span> &#123;  </span><br><span class="line">  <span class="keyword">return</span> l.logger.LogMode(lev)</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// Info print info</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *CustomGormLogger)</span> <span class="title">Info</span><span class="params">(ctx context.Context, msg <span class="keyword">string</span>, data ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;  </span><br><span class="line">  l.logger.Info(ctx, msg, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Warn print warn messages</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *CustomGormLogger)</span> <span class="title">Warn</span><span class="params">(ctx context.Context, msg <span class="keyword">string</span>, data ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;  </span><br><span class="line">  l.logger.Warn(ctx, msg, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error print error messages</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *CustomGormLogger)</span> <span class="title">Error</span><span class="params">(ctx context.Context, msg <span class="keyword">string</span>, data ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;  </span><br><span class="line">  l.logger.Error(ctx, msg, data) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Trace print custom sql message with uid</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *CustomGormLogger)</span> <span class="title">Trace</span><span class="params">(ctx context.Context, begin time.Time, fc <span class="keyword">func</span>()</span> <span class="params">(sql <span class="keyword">string</span>, rowsAffected <span class="keyword">int64</span>)</span>, <span class="title">err</span> <span class="title">error</span>)</span> &#123;</span><br><span class="line">  userUid := ctx.Value(UserUIDKey)</span><br><span class="line">  elapsed := <span class="keyword">float64</span>(time.Since(begin))/<span class="number">1e6</span></span><br><span class="line"></span><br><span class="line">  sql, rows := fc()</span><br><span class="line">  formatSql := strings.ReplaceAll(sql, <span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">  log.Infof(<span class="string">&quot;[file]=%s&quot;</span>, gorm_util.FileWithLineNum())</span><br><span class="line">  log.Infof(<span class="string">&quot;[%.3fms][rows %d][user_uid %s] %s&quot;</span>, elapsed, rows, userUid, formatSql)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;  </span><br><span class="line">    log.Warnf(<span class="string">&quot;[%.3fms] SQL ERROR, %v&quot;</span>, elapsed, err)</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">if</span> elapsed &gt; <span class="keyword">float64</span>(slowThreshold.Nanoseconds()) &#123;  </span><br><span class="line">    log.Infof(<span class="string">&quot;[%.3fms] SLOW SQL&quot;</span>, elapsed)  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Enable debug mode and replace with custom logger</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NewServer creates a server implementation for student server.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServer</span><span class="params">(ctx context.Context, config Config)</span> <span class="params">(studentplanpb.StudentPlanServiceServer, error)</span></span> &#123;</span><br><span class="line">  connectionString := fmt.Sprintf(db.CONNECTION_FORMAT_STRING, config.SQLHost, config.DBUser, config.DBPassword, config.DBPort, config.SQLDB)</span><br><span class="line">  db, err := db.InitDB(connectionString)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;failed to connect to mysqlDB: %v&quot;</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> config.DBDebug &#123;</span><br><span class="line">    db = db.Debug()</span><br><span class="line">    defaultLogger := orm.CustomGormLogger()</span><br><span class="line">    defaultLogger.LogMode(logger.Info)</span><br><span class="line">    db.Logger = defaultLogger</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  s := &amp;impl&#123;</span><br><span class="line">    Config:     config,</span><br><span class="line">    db:         db,</span><br><span class="line">    pool:       pool,</span><br><span class="line">    stroageCli: stroageCli,</span><br><span class="line">    stdriver:   stroageServer,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> s, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Usage<br> It is more better to implement ParseAuthorization as middleware and set UserUIDKey for custom GORM logging within the middleware to avoid code duplication.</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *impl)</span> <span class="title">queryUserss</span><span class="params">(ctx context.Context, req *userpb.QueryUsersRequest)</span> <span class="params">(*userpb.QueryUsersResponse, error)</span></span> &#123;</span><br><span class="line">  <span class="comment">// check user role</span></span><br><span class="line">  uid, role := jwtext.ParseAuthorization(ctx, s.JWT)</span><br><span class="line">  <span class="keyword">if</span> role == userpb.Role_UNKNOWN &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, errors.GrpcError(codes.Unauthenticated, <span class="string">&quot;user not logged in&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set UserUIDKey for custom gorm logging</span></span><br><span class="line">  ctx = context.WithValue(ctx, orm.UserUIDKey, uid)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Result</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">time=<span class="string">&quot;2024-05-16T14:11:23+08:00&quot;</span> level=info msg=<span class="string">&quot;starting student server at port :9090&quot;</span></span><br><span class="line">time=<span class="string">&quot;2024-05-16T14:11:25+08:00&quot;</span> level=info msg=<span class="string">&quot;[file]=xxx/backend/v3/pkg/db/utils.go:264&quot;</span></span><br><span class="line">time=<span class="string">&quot;2024-05-16T14:11:25+08:00&quot;</span> level=info msg=<span class="string">&quot;[16.995ms][rows 1][user_uid 435e7fa8-b444-11ee-96d1-3e9675b204c9] SELECT * FROM users WHERE id=&#x27;435e7fa8-b444-11ee-96d1-3e9675b204c9&#x27; and deleted=0 ORDER BY users.id OFFSET 0 ROW FETCH NEXT 1 ROWS ONLY&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Golang</tag>
        <tag>GORM</tag>
      </tags>
  </entry>
  <entry>
    <title>Unveiling HTTPS: The Roles of PKCS, Digital Certificates, Public Key Infrastructure, and Chain of Trust</title>
    <url>/2024/06/26/Unveiling-HTTPS-The-Roles-of-PKCS-Digital-Certificates-Public-Key-Infrastructure-and-Chain-of-Trust/</url>
    <content><![CDATA[<h2 id="HTTPS-Handshake-Flow"><a href="#HTTPS-Handshake-Flow" class="headerlink" title="HTTPS Handshake Flow"></a>HTTPS Handshake Flow</h2><p>In network communications, we often need to protect the content of our messages, and this is done by hiding the original content through encryption. HTTPS (HyperText Transfer Protocol Secure) uses a combination of symmetric and asymmetric encryption to ensure secure communication over the internet. Here’s how it works:</p>
<a id="more"></a>

<ol>
<li><p>TCP Handshake: The initial connection between the client and server is established using TCP (Transmission Control Protocol). This handshake ensures a reliable connection.</p>
</li>
<li><p>SSL/TLS Handshake:</p>
<ul>
<li>Client Hello: The client sends a message indicating its support for SSL/TLS version and set of necessary encryption algorithms (cipher suites) it prefers.</li>
<li>Server Hello: The server responds so let browser knows whether it can support the algorithms and TLS version. The server then sends the SSL certificate to the client. The certificate contains the public key, hostname, expiry dates, etc.</li>
<li>Certificate Verification: The client verifies the server’s certificate to ensure it belongs to the intended party.</li>
<li>Key Exchange: The client uses this public key(parse from certificate) to encrypt a randomly generated session key.</li>
<li>Finished: Now that both the client and the server hold the same session key (symmetric encryption),.</li>
</ul>
</li>
<li><p>Data Encryption:</p>
<ul>
<li>Symmetric Encryption: All subsequent data is encrypted using the shared secret key. This is much faster than asymmetric encryption and is ideal for large amounts of data.</li>
</ul>
</li>
</ol>
<h2 id="Symmetric-Encryption"><a href="#Symmetric-Encryption" class="headerlink" title="Symmetric Encryption"></a>Symmetric Encryption</h2><p>Symmetric-key algorithms are algorithms for cryptography that use the same cryptographic keys for both the encryption of plaintext and the decryption of ciphertext. The key represent a shared secret between two or more parties that can be used to maintain a private information link.</p>
<ul>
<li><p>Example Algorithms: AES (Advanced Encryption Standard), DES (Data Encryption Standard). </p>
</li>
<li><p>For more Algorithms and their difference, reference: <a href="https://cryptobook.nakov.com/symmetric-key-ciphers/popular-symmetric-algorithms">Popular Symmetric Algorithms</a>, <a href="https://en.wikipedia.org/wiki/Symmetric-key_algorithm">Symmetric-key algorithm</a></p>
</li>
</ul>
<p>This solution appears ideal, but there’s a significant issue: how can multiple parties agree on the encryption key? If the key is transmitted over the network, it could be intercepted by hackers. Consequently, symmetric encryption is perpetually caught in this dilemma. This is where asymmetric encryption becomes essential.</p>
<h2 id="Asymmetric-Encryption-Public-key-cryptography"><a href="#Asymmetric-Encryption-Public-key-cryptography" class="headerlink" title="Asymmetric Encryption(Public key cryptography)"></a>Asymmetric Encryption(Public key cryptography)</h2><p>Asymmetric Encryption use pairs of related keys. Each key pair consists of a public key and a corresponding private key. Anyone with a public key can encrypt a message, yielding a ciphertext, but only those who know the corresponding private key can decrypt the ciphertext to obtain the original message.</p>
<ul>
<li><p>Example Algorithms: RSA (Rivest-Shamir-Adleman), ECC (Elliptic Curve Cryptography).</p>
</li>
<li><p>For more Algorithms and their difference, reference: <a href="https://dev.digicert.com/en/trustcore-sdk/nanocrypto/asymmetric-algorithms.html">Asymmetric Algorithms</a>, <a href="https://en.wikipedia.org/wiki/Public-key_cryptography">Public-key cryptography</a></p>
</li>
</ul>
<h2 id="PKCS-Public-Key-Cryptography-Standards"><a href="#PKCS-Public-Key-Cryptography-Standards" class="headerlink" title="PKCS(Public Key Cryptography Standards)"></a>PKCS(Public Key Cryptography Standards)</h2><p>Public Key Cryptography Standards (PKCS) are protocols that structure various aspects of using public key infrastructure for information exchange. It includes standards for key exchange, password-based encryption, cryptographic messaging, private key information, certification requests, cryptographic tokens, and personal information exchange.</p>
<p>RSA, a fundamental cryptographic algorithm, is utilized within various PKCS standards to ensure secure and standardized implementation of public key cryptography. As one of the first public key cryptosystems, the RSA algorithm is widely used for secure data transmission and underpins many protocols within the PKCS suite.</p>
<p><strong>Some PKCS Standards Related To RSA</strong>:</p>
<ul>
<li><p><strong>PKCS #1 RSA Cryptography Standard</strong>:</p>
<p>  This is the a standard specifically for RSA cryptography. It defines the mathematical properties and formats for RSA public and private keys, as well as the encryption and signature schemes based on RSA. It includes details on padding schemes (such as OAEP and PSS) to ensure the security of RSA operations. </p>
<ul>
<li><strong>PKCS #1 v1.5</strong>  and <strong>PKCS #1 v2.0(OAEP)</strong>  are the primary padding schemes for RSA encryption, RSA can be used with various padding schemes, particularly in the context of digital signatures. OAEP is generally preferred for its stronger security properties</li>
<li>Standard RSA private key decryption involves removing all padding or encoding from the ciphertext, resulting in the plaintext as it was originally encrypted. Prior to decryption, it is essential to determine the specific padding mode used during encryption. Additionally, the length of the input to any RSA decryption method must match the size of the RSA key in bytes (i.e., the modulus size in bytes).  For OAEP (Optimal Asymmetric Encryption Padding), it is also crucial to know which hash functions were used during the encoding process.</li>
</ul>
</li>
<li><p><strong>PKCS #7 Cryptographic Message Syntax Standard</strong>:</p>
<p>  This standard defines a general syntax for data that may have cryptography applied to it, such as digital signatures and encryption. RSA is often used within PKCS #7 for signing and encrypting messages.</p>
</li>
<li><p><strong>PKCS #8 Private-Key Information Syntax Standard</strong>:<br>  This is a more versatile standard for storing private keys. It defines the structure for private key information and supports a variety of key types, including RSA, DSA, and ECDSA. The standard specifies how private keys should be encoded and securely stored.</p>
</li>
<li><p><strong>PKCS #10 Certification Request Standard:</strong></p>
<p>  This standard is used when applying for a digital certificate from a certificate authority.</p>
</li>
<li><p><strong>PKCS #12 Personal Information Exchange Syntax Standard</strong>:</p>
<p>  This standard defines how to securely store and transport a user’s private keys, certificates, and other related information. It is used extensively for exporting and importing digital certificates.</p>
</li>
</ul>
<p>More PKCS details:</p>
<ul>
<li><a href="https://blog.miniasp.com/post/2018/04/21/PKI-Digital-Certificate-Format-Convertion-Notes">認識 PKI 架構下的數位憑證格式與憑證格式轉換的心得分享</a></li>
<li><a href="https://en.wikipedia.org/wiki/PKCS">wiki PKCS</a></li>
<li><a href="https://www.spiceworks.com/it-security/network-security/articles/what-is-pkcs/">What are Public Key Cryptography Standards (PKCS)? Meaning, Specifications, and Importance</a></li>
<li><a href="https://datatracker.ietf.org/doc/html/rfc8017">IETF DataTracker PKCS #1: RSA Cryptography Specifications Version 2.2</a></li>
<li><a href="https://stackoverflow.com/questions/48958304/pkcs1-and-pkcs8-format-for-rsa-private-key">PKCS#1 and PKCS#8 format for RSA private key</a></li>
</ul>
<p>Asymmetric encryption also encounters a similar challenge: how do you share the public key with the other party? One approach is to post it on a public web address for the other party to download; another is to send it during the connection establishment. Both methods share a common problem: how do you verify that the public key you received is legitimate? Could someone impersonate the website and provide you with their own public key?</p>
<p>This is where Public Key Infrastructure (PKI) and Digital certificate(Public key certificates) comes in.</p>
<h2 id="Public-Key-Infrastructure-PKI"><a href="#Public-Key-Infrastructure-PKI" class="headerlink" title="Public Key Infrastructure (PKI)"></a>Public Key Infrastructure (PKI)</h2><p>A Public Key Infrastructure (PKI) is a system that binds public keys with the identities of entities such as individuals and organizations. This binding is achieved through a registration and certificate issuance process conducted by a trusted entity known as a Certificate Authority (CA). Depending on the security requirements, this process can be automated or involve human oversight.</p>
<p>PKI provides essential “trust services,” which essentially means trusting the actions or outputs of entities, whether they are people or computers. These trust services aim to achieve one or more of the following objectives: Confidentiality, Integrity, and Authenticity (often abbreviated as CIA).</p>
<p>Here’s an overview of what is involved in PKI:</p>
<ul>
<li><strong>Certificate Authority (CA):</strong> An entity that stores, issues, and signs digital certificates.</li>
<li><strong>Registration Authority (RA):</strong> An entity that verifies the identities of entities (individuals, organizations, applications, etc.) requesting certificates.</li>
<li><strong>Central Directory:</strong> A repository where keys are stored and retrieved.</li>
<li><strong>Certificate Management System:</strong> A system that manages the lifecycle of certificates, including issuance, access, and delivery.</li>
<li><strong>Certificate Policy:</strong> A set of rules that defines the procedures for managing certificates and keys within the PKI framework, ensuring their security.</li>
</ul>
<p>For more detailed information: <a href="https://en.wikipedia.org/wiki/Public_key_infrastructure">Wikipedia page on Public Key Infrastructure</a>.</p>
<p>Now that you understand what a PKI (Public Key Infrastructure) is, let’s delve into how you can request digital certificates and authenticate them.</p>
<h2 id="Digital-certificate-Public-key-certificates"><a href="#Digital-certificate-Public-key-certificates" class="headerlink" title="Digital certificate (Public key certificates)"></a>Digital certificate (Public key certificates)</h2><h3 id="Generating-a-Key-Pair"><a href="#Generating-a-Key-Pair" class="headerlink" title="Generating a Key Pair"></a>Generating a Key Pair</h3><p>First, generate a pair of cryptographic keys—a public key and a private key. The public key is shared openly, while the private key is kept secure and known only to you.</p>
<ol>
<li>generate private key</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># NOTICE: kept private key secure</span></span><br><span class="line">$ openssl genrsa -out yoursite_private.key 1024</span><br><span class="line">$ cat yoursite_private.key</span><br><span class="line"></span><br><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAKLp3YaO0SuRvokz</span><br><span class="line">DD91tVnY0wxQI3powVlV0EcXX19t2CcCYu2glkYTKqGdpECY1iV2QQXBZiZ2dx5N</span><br><span class="line">TRfVllYv4ThLhOydUjFGWL0+z1FbwkyyUYusyRbkpc7xG2oZ/UijFM8y47LqKIzK</span><br><span class="line">C5sqSsrxESR4csGkljkp7KTHtT4jAgMBAAECgYA4JbfmlzQ5+uobKQ/Qk0XkaFkc</span><br><span class="line">hkYj+xSgMHYu+jwxjI8Rqr3jvhPspNBtkQI6DTLJCH+Sdzw4h124gNXQIBnGn4kt</span><br><span class="line">K9FadXSJRpqnulhEkPkA/NyAcKHzjm4GpWa5bA5+BrLJScBq00VK6cmhXfP3jFSJ</span><br><span class="line">D4nZd+4Eck9wvaGGOQJBANiIghGCKQ3q3BUig1S3NXRHVDp69j8T+cDstNuvK1Wp</span><br><span class="line">+dMjpbzWOhloRK0ieCdVa0TRXhaylPuomNpI4m1hjO8CQQDAm3MPyS8toCz0ggkH</span><br><span class="line">9Y2DVqJmTI4vQ6in+9Lya1z2iSp2Tc5Lyqm/ZcFc1uBCYSdoYWX5cgEMoKRJHNPx</span><br><span class="line">PEoNAkEAkc4J14RP5ME7BThCOu9LHUtSmjZmTj9DM/ewKSWhBoP4Z4ZfefK/GJCv</span><br><span class="line">fe3x/np0Sti4hIwn6fWzR3lAjurbHQJAVqOWVnuBJVzv2+zCczoZtgK6epnlO42L</span><br><span class="line">yESW10VERAHff+fv7Ff1k4sKN+DQcAuT1ng5jsOhhTSdseWt0M314QJBAMTFneqp</span><br><span class="line">vO4QEmhHHhf4vqAiZ16IpTRl4XgfN50gpr+GoHshVSdxsk1cW3dTH2pNoiVBL56R</span><br><span class="line">esjnNHpPWmkIJME=</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>generate public key from private key</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openssl rsa -<span class="keyword">in</span> yoursite_private.key -pubout -out yoursite_public.pem</span><br><span class="line">$ cat yoursite_public.key</span><br><span class="line"></span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCi6d2GjtErkb6JMww/dbVZ2NMM</span><br><span class="line">UCN6aMFZVdBHF19fbdgnAmLtoJZGEyqhnaRAmNYldkEFwWYmdnceTU0X1ZZWL+E4</span><br><span class="line">S4TsnVIxRli9Ps9RW8JMslGLrMkW5KXO8RtqGf1IoxTPMuOy6iiMygubKkrK8REk</span><br><span class="line">eHLBpJY5Keykx7U+IwIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Then you can encrypt and decrypt a message by pair of cryptographic keys.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># PKCS#1 v2.0(RSA-OAEP)</span></span><br><span class="line"><span class="comment"># encrypt</span></span><br><span class="line">openssl pkeyutl -encrypt -<span class="keyword">in</span> plaintext.txt -pubin -inkey yoursite_public.pem -pkeyopt rsa_padding_mode:oaep -out ciphertext.bin</span><br><span class="line"><span class="comment"># decrypt</span></span><br><span class="line">openssl pkeyutl -decrypt -<span class="keyword">in</span> ciphertext.bin -inkey yoursite_private.key -pkeyopt rsa_padding_mode:oaep -out decrypted.txt</span><br></pre></td></tr></table></figure>

<p>Since that every entity can generate their own key pair, how can others verify that this key pair indeed represents your identity? This is where the involvement of authoritative bodies becomes crucial. A third-party validation authority (VA) can provide the necessary entity information on behalf of the certification authority (CA).</p>
<h3 id="Generate-Certificate-Signing-Request-CSR"><a href="#Generate-Certificate-Signing-Request-CSR" class="headerlink" title="Generate Certificate Signing Request (CSR):"></a>Generate Certificate Signing Request (CSR):</h3><p>A CSR includes your public key and information about your identity. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Run the OpenSSL command to generate the CSR:</span></span><br><span class="line">$ openssl req -new -key yoursite_private.key -out yoursite.csr</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter <span class="string">&#x27;.&#x27;</span>, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [AU]:TW</span><br><span class="line">State or Province Name (full name) [Some-State]:Taipei</span><br><span class="line">Locality Name (eg, city) []:Taipai</span><br><span class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:YourSite</span><br><span class="line">Organizational Unit Name (eg, section) []:Test</span><br><span class="line">Common Name (e.g. server FQDN or YOUR name) []:Test</span><br><span class="line">Email Address []:<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">Please enter the following <span class="string">&#x27;extra&#x27;</span> attributes</span><br><span class="line">to be sent with your certificate request</span><br><span class="line">A challenge password []:<span class="built_in">test</span></span><br><span class="line">An optional company name []:<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">$ cat yoursite.csr</span><br><span class="line"></span><br><span class="line">-----BEGIN CERTIFICATE REQUEST-----</span><br><span class="line">MIIB3zCCAUgCAQAwdTELMAkGA1UEBhMCVFcxDzANBgNVBAgMBlRhaXBlaTEPMA0G</span><br><span class="line">A1UEBwwGVGFpcGFpMREwDwYDVQQKDAhZb3VyU2l0ZTENMAsGA1UECwwEVGVzdDEN</span><br><span class="line">MAsGA1UEAwwEVGVzdDETMBEGCSqGSIb3DQEJARYEdGVzdDCBnzANBgkqhkiG9w0B</span><br><span class="line">AQEFAAOBjQAwgYkCgYEAoundho7RK5G+iTMMP3W1WdjTDFAjemjBWVXQRxdfX23Y</span><br><span class="line">JwJi7aCWRhMqoZ2kQJjWJXZBBcFmJnZ3Hk1NF9WWVi/hOEuE7J1SMUZYvT7PUVvC</span><br><span class="line">TLJRi6zJFuSlzvEbahn9SKMUzzLjsuoojMoLmypKyvERJHhywaSWOSnspMe1PiMC</span><br><span class="line">AwEAAaAqMBMGCSqGSIb3DQEJAjEGDAR0ZXN0MBMGCSqGSIb3DQEJBzEGDAR0ZXN0</span><br><span class="line">MA0GCSqGSIb3DQEBCwUAA4GBACl5YxcubqBt9HQ6sA0+M40xf8EyU+/xYYxi7j7p</span><br><span class="line">LqWMAupBsbicX3zsB7dP8AuT2cQkbCt6AGzuPyLA2aDSlcY1a7f4LbpMIP268LPs</span><br><span class="line">zGTFGbQGM+Y2xh7uPBZyF7FJOlX//usRnzDsss8OLoCgHxNomIwvFKWvemxB2k/a</span><br><span class="line">jtgC</span><br><span class="line">-----END CERTIFICATE REQUEST-----</span><br><span class="line"></span><br><span class="line"><span class="comment"># Verify the CSR: you can inspect the contents of the CSR to ensure that the information is correct:</span></span><br><span class="line">$ openssl req -<span class="keyword">in</span> yoursite.csr -noout -text</span><br><span class="line"></span><br><span class="line">Certificate Request:</span><br><span class="line">    Data:</span><br><span class="line">        Version: 1 (0x0)</span><br><span class="line">        Subject: C=TW, ST=Taipei, L=Taipai, O=YourSite, OU=Test, CN=Test, emailAddress=<span class="built_in">test</span></span><br><span class="line">        Subject Public Key Info:</span><br><span class="line">            Public Key Algorithm: rsaEncryption</span><br><span class="line">                Public-Key: (1024 bit)</span><br><span class="line">                Modulus:</span><br><span class="line">                    00:a2:e9:dd:86:8e:d1:2b:91:be:89:33:0c:3f:75:</span><br><span class="line">                    b5:59:d8:d3:0c:50:23:7a:68:c1:59:55:d0:47:17:</span><br><span class="line">                    5f:5f:6d:d8:27:02:62:ed:a0:96:46:13:2a:a1:9d:</span><br><span class="line">                    a4:40:98:d6:25:76:41:05:c1:66:26:76:77:1e:4d:</span><br><span class="line">                    4d:17:d5:96:56:2f:e1:38:4b:84:ec:9d:52:31:46:</span><br><span class="line">                    58:bd:3e:cf:51:5b:c2:4c:b2:51:8b:ac:c9:16:e4:</span><br><span class="line">                    a5:ce:f1:1b:6a:19:fd:48:a3:14:cf:32:e3:b2:ea:</span><br><span class="line">                    28:8c:ca:0b:9b:2a:4a:ca:f1:11:24:78:72:c1:a4:</span><br><span class="line">                    96:39:29:ec:a4:c7:b5:3e:23</span><br><span class="line">                Exponent: 65537 (0x10001)</span><br><span class="line">        Attributes:</span><br><span class="line">            unstructuredName         :<span class="built_in">test</span></span><br><span class="line">            challengePassword        :<span class="built_in">test</span></span><br><span class="line">            Requested Extensions:</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">    Signature Value:</span><br><span class="line">        29:79:63:17:2e:6e:a0:6d:f4:74:3a:b0:0d:3e:33:8d:31:7f:</span><br><span class="line">        c1:32:53:ef:f1:61:8c:62:ee:3e:e9:2e:a5:8c:02:ea:41:b1:</span><br><span class="line">        b8:9c:5f:7c:ec:07:b7:4f:f0:0b:93:d9:c4:24:6c:2b:7a:00:</span><br><span class="line">        6c:ee:3f:22:c0:d9:a0:d2:95:c6:35:6b:b7:f8:2d:ba:4c:20:</span><br><span class="line">        fd:ba:f0:b3:ec:cc:64:c5:19:b4:06:33:e6:36:c6:1e:ee:3c:</span><br><span class="line">        16:72:17:b1:49:3a:55:ff:fe:eb:11:9f:30:ec:b2:cf:0e:2e:</span><br><span class="line">        80:a0:1f:13:68:98:8c:2f:14:a5:af:7a:6c:41:da:4f:da:8e:</span><br><span class="line">        d8:02</span><br></pre></td></tr></table></figure>

<p>After running these steps, you’ll have a <code>yoursite.csr</code> file that you can submit to a Certificate Authority (CA) to obtain an SSL/TLS certificate.</p>
<p>A Certificate Authority (CA) may run below command to generate Certificate.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openssl x509 -req -<span class="keyword">in</span> yoursite.csr -CA cacertificate.pem -CAkey caprivate.key -out yoursite.pem</span><br></pre></td></tr></table></figure>

<p>Reference:</p>
<ul>
<li>Explains the various ways in which RSA keys can be stored:  <a href="https://www.cryptosys.net/pki/rsakeyformats.html">RSA Key Formats</a></li>
<li><a href="https://stackoverflow.com/questions/63195304/difference-between-pem-crt-key-files">Difference between pem, crt, key files</a></li>
</ul>
<h3 id="Self-signed-certificate"><a href="#Self-signed-certificate" class="headerlink" title="Self-signed certificate"></a>Self-signed certificate</h3><p>For for testing or internal use, you can also generate self-signed certificate using OpenSSL, you’ll need both a private key and a certificate signing request (CSR). However, you can generate a self-signed certificate directly without a CSR. Here’s how to do it:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openssl req -new -x509 -key yoursite_private.key -out yoursite_certificate.crt -days 365</span><br><span class="line">$ openssl x509 -<span class="keyword">in</span> yoursite_certificate.crt -text -noout</span><br><span class="line"></span><br><span class="line">Certificate:</span><br><span class="line">    Data:</span><br><span class="line">        Version: 3 (0x2)</span><br><span class="line">        Serial Number:</span><br><span class="line">            3d:b5:59:d5:c9:77:54:96:91:d4:9f:c3:27:f4:34:8a:58:a3:2a:3a</span><br><span class="line">        Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">        Issuer: C=TW, ST=Taipei, L=Taipei, O=YourSite</span><br><span class="line">        Validity</span><br><span class="line">            Not Before: Jun 26 01:58:40 2024 GMT</span><br><span class="line">            Not After : Jun 26 01:58:40 2025 GMT</span><br><span class="line">        Subject: C=TW, ST=Taipei, L=Taipei, O=YourSite</span><br><span class="line">        Subject Public Key Info:</span><br><span class="line">            Public Key Algorithm: rsaEncryption</span><br><span class="line">                Public-Key: (1024 bit)</span><br><span class="line">                Modulus:</span><br><span class="line">                    00:a2:e9:dd:86:8e:d1:2b:91:be:89:33:0c:3f:75:</span><br><span class="line">                    b5:59:d8:d3:0c:50:23:7a:68:c1:59:55:d0:47:17:</span><br><span class="line">                    5f:5f:6d:d8:27:02:62:ed:a0:96:46:13:2a:a1:9d:</span><br><span class="line">                    a4:40:98:d6:25:76:41:05:c1:66:26:76:77:1e:4d:</span><br><span class="line">                    4d:17:d5:96:56:2f:e1:38:4b:84:ec:9d:52:31:46:</span><br><span class="line">                    58:bd:3e:cf:51:5b:c2:4c:b2:51:8b:ac:c9:16:e4:</span><br><span class="line">                    a5:ce:f1:1b:6a:19:fd:48:a3:14:cf:32:e3:b2:ea:</span><br><span class="line">                    28:8c:ca:0b:9b:2a:4a:ca:f1:11:24:78:72:c1:a4:</span><br><span class="line">                    96:39:29:ec:a4:c7:b5:3e:23</span><br><span class="line">                Exponent: 65537 (0x10001)</span><br><span class="line">        X509v3 extensions:</span><br><span class="line">            X509v3 Subject Key Identifier:</span><br><span class="line">                42:37:D1:41:A1:BC:B9:12:61:76:FE:F4:BD:80:F3:6D:96:75:21:FC</span><br><span class="line">            X509v3 Authority Key Identifier:</span><br><span class="line">                42:37:D1:41:A1:BC:B9:12:61:76:FE:F4:BD:80:F3:6D:96:75:21:FC</span><br><span class="line">            X509v3 Basic Constraints: critical</span><br><span class="line">                CA:TRUE</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">    Signature Value:</span><br><span class="line">        33:f3:3f:5f:9c:63:a0:10:1e:90:d1:50:4e:d3:e2:6f:19:24:</span><br><span class="line">        98:41:57:65:32:48:a5:89:4e:b3:ea:25:95:8b:d0:ee:44:5e:</span><br><span class="line">        28:b1:1c:3d:65:3e:37:95:e0:<span class="built_in">cd</span>:6e:7b:2f:5c:8a:02:4e:99:</span><br><span class="line">        df:42:8b:a7:6b:f7:23:b4:47:15:7e:93:a5:8f:91:e8:29:21:</span><br><span class="line">        56:5a:f9:ab:9f:a1:24:d7:cf:5a:40:aa:57:02:30:a5:db:be:</span><br><span class="line">        2d:b1:c8:53:6c:14:86:9c:2b:a4:7e:0e:84:ff:53:a7:1b:02:</span><br><span class="line">        28:27:ca:4a:63:70:c0:de:84:33:66:f7:d9:aa:a0:b3:ba:80:</span><br><span class="line">        f8:8a</span><br></pre></td></tr></table></figure>

<p>the contents of this certificate:</p>
<ul>
<li>Issuer: This indicates who issued the certificate.</li>
<li>Subject: Specifies to whom the certificate was issued.</li>
<li>Validity: Indicates the duration of validity for the certificate.</li>
<li>Public Key: Contains the content of the public key.</li>
<li>Signature Algorithm: Specifies the algorithm used for signing.</li>
</ul>
<p>Reference:</p>
<ul>
<li><a href="https://blog.miniasp.com/post/2019/02/25/Creating-Self-signed-Certificate-using-OpenSSL">如何使用 OpenSSL 建立開發測試用途的自簽憑證 (Self-Signed Certificate)</a></li>
</ul>
<h3 id="Digital-signature"><a href="#Digital-signature" class="headerlink" title="Digital signature"></a>Digital signature</h3><p>A digital signature is a cryptographic mechanism used to verify the authenticity and integrity of a message, software, or digital document. It functions like a handwritten signature or a stamped seal, but it is much more secure.</p>
<p>When we submit a certificate request to a Certificate Authority (CA), the CA will sign the certificate. This process is known as the signature algorithm. But how can we ensure that the signature is indeed from the CA? The answer lies in using something that only the CA privately owns, which is the CA’s private key.</p>
<p>For example, if Google needs to prove to users that it is indeed Google, it must find a reliable CA. The CA’s staff will verify various documents and proofs of identity and then issue a digital certificate for Google.</p>
<p>Finally, this certificate contains all of Google’s identity information and a digital signature signed by the CA.</p>
<ul>
<li><p>The digital signature algorithm works as follows:</p>
<ul>
<li><p><strong>Signing</strong>: A certificate contains three parts: certificate content, hash algorithm, and encrypted ciphertext. The certificate content is hashed using the hash algorithm to produce a hash value, which is then encrypted using the private key provided by the CA institution.</p>
</li>
<li><p><strong>Verification</strong>: This certificate has an issuing authority, the CA. You just need to obtain the public key of this CA and use it to decrypt the signature part in certificate. If the decryption is successful and the hash matches, it means that the certificate is valid.</p>
</li>
</ul>
<img src="/2024/06/26/Unveiling-HTTPS-The-Roles-of-PKCS-Digital-Certificates-Public-Key-Infrastructure-and-Chain-of-Trust/Digital_Signature_diagram_svg.png" width="70%" height="70%" title="Digital_Signature_diagram" alt="https://io.wikipedia.org/wiki/Bica_signato#/media/Arkivo:Digital_Signature_diagram.svg">

</li>
</ul>
<p>Reference</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Digital_signature">Digital Signature</a></li>
</ul>
<h2 id="Chain-Of-Trust"><a href="#Chain-Of-Trust" class="headerlink" title="Chain Of Trust"></a><strong>Chain Of Trust</strong></h2><p>The main difference between a CA-signed certificate and a self-signed certificate is that a self-signed certificate contains a single CERTIFICATE block, whereas a CA-signed certificate contains multiple CERTIFICATE blocks.</p>
<ul>
<li>Self-signed certificate contains a single CERTIFICATE block, encompassing all necessary information such as the public key, identity details, and digital signature. While self-signed certificates can be convenient for testing or internal use, they lack the endorsement of a trusted third party, which is essential for establishing widespread trust in the certificate’s authenticity.</li>
<li>On the other hand,  CA-signed certificates are issued and signed by a trusted Certificate Authority. These certificates typically include multiple CERTIFICATE blocks within a chain. The primary CERTIFICATE block represents the certificate being issued (end-entity certificate), while subsequent blocks (intermediate certificates) link the end-entity certificate to the root certificate of the CA. This chain of certificates forms the basis of the “chain of trust,” where each certificate in the chain is validated against the next until the root CA certificate is reached.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># self signed contains single CERTIFICATE block</span></span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIICYDCCAcmgAwIBAgIUPbVZ1cl3VJaR1J/DJ/Q0ilijKjowDQYJKoZIhvcNAQEL</span><br><span class="line">BQAwQjELMAkGA1UEBhMCVFcxDzANBgNVBAgMBlRhaXBlaTEPMA0GA1UEBwwGVGFp</span><br><span class="line">cGVpMREwDwYDVQQKDAhZb3VyU2l0ZTAeFw0yNDA2MjYwMTU4NDBaFw0yNTA2MjYw</span><br><span class="line">MTU4NDBaMEIxCzAJBgNVBAYTAlRXMQ8wDQYDVQQIDAZUYWlwZWkxDzANBgNVBAcM</span><br><span class="line">BlRhaXBlaTERMA8GA1UECgwIWW91clNpdGUwgZ8wDQYJKoZIhvcNAQEBBQADgY0A</span><br><span class="line">MIGJAoGBAKLp3YaO0SuRvokzDD91tVnY0wxQI3powVlV0EcXX19t2CcCYu2glkYT</span><br><span class="line">KqGdpECY1iV2QQXBZiZ2dx5NTRfVllYv4ThLhOydUjFGWL0+z1FbwkyyUYusyRbk</span><br><span class="line">pc7xG2oZ/UijFM8y47LqKIzKC5sqSsrxESR4csGkljkp7KTHtT4jAgMBAAGjUzBR</span><br><span class="line">MB0GA1UdDgQWBBRCN9FBoby5EmF2/vS9gPNtlnUh/DAfBgNVHSMEGDAWgBRCN9FB</span><br><span class="line">oby5EmF2/vS9gPNtlnUh/DAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUA</span><br><span class="line">A4GBADPzP1+cY6AQHpDRUE7T4m8ZJJhBV2UySKWJTrPqJZWL0O5EXiixHD1lPjeV</span><br><span class="line">4M1uey9cigJOmd9Ci6dr9yO0RxV+k6WPkegpIVZa+aufoSTXz1pAqlcCMKXbvi2x</span><br><span class="line">yFNsFIacK6R+DoT/U6cbAignykpjcMDehDNm99mqoLO6gPiK</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line"></span><br><span class="line"><span class="comment"># CA signed contains multiple CERTIFICATE block</span></span><br><span class="line"></span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">[End-entity Certificate]</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">[Intermediate Certificate 1]</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">[Intermediate Certificate 2]</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">[Root Certificate]</span><br><span class="line">-----END CERTIFICATE-----</span><br></pre></td></tr></table></figure>

<p>The chain of trust is critical in ensuring the integrity and security of digital communications. By relying on CA-signed certificates and their associated chains, users can verify the legitimacy of a certificate without directly verifying the identity of the entity themselves. This process helps prevent various security threats, including man-in-the-middle attacks and unauthorized access.</p>
]]></content>
      <categories>
        <category>HTTPS</category>
      </categories>
      <tags>
        <tag>HTTPS</tag>
        <tag>PKCS</tag>
        <tag>Digital Certificates</tag>
        <tag>Public Key Infrastructure</tag>
        <tag>PKI</tag>
        <tag>Chain of Trust</tag>
      </tags>
  </entry>
  <entry>
    <title>Dig in WebSocket: Protocol, API Design, and Security</title>
    <url>/2024/08/15/20240814-websocket-protocol-apiSchemaDesign-authentication/</url>
    <content><![CDATA[<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p>WebSocket operate at the Application layer in both the OSI(Layer 7) and TCP/IP(Layer 4) models.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"> HTTP       WebSocket</span><br><span class="line">--------------------</span><br><span class="line">        TCP</span><br><span class="line">--------------------</span><br><span class="line">        IP</span><br><span class="line">--------------------</span><br><span class="line">Network access Layer</span><br></pre></td></tr></table></figure>

<p>The WebSocket protocol enables full-duplex communication, allowing data to be sent and received simultaneously over a single, persistent connection. This capability is ideal for real-time applications such as chat systems, live notifications, and online gaming.</p>
<a id="more"></a>
<h2 id="How-to-Establish-a-WebSocket-Connection"><a href="#How-to-Establish-a-WebSocket-Connection" class="headerlink" title="How to Establish a WebSocket Connection"></a>How to Establish a WebSocket Connection</h2><p>A WebSocket server is essentially an application that listens on any port of a TCP, following a designated protocol. A WebSocket connection starts with an HTTP handshake and then upgrades to a persistent TCP connection. Once this connection is established, it remains open for an extended period, allowing real-time communication between the client and server.</p>
<ol>
<li><p><strong>Client handshake request</strong></p>
<p> Client sent a HTTP request with method <code>GET</code> for upgrading the connection from HTTP to WebSocket.</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">GET /chat HTTP/<span class="number">1.1</span></span><br><span class="line">Host: example.com:<span class="number">8000</span></span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==</span><br><span class="line">Sec-WebSocket-Version: <span class="number">13</span></span><br></pre></td></tr></table></figure>

<ul>
<li>The <strong><code>Sec-WebSocket-Key</code></strong> header is used  to ensure that the client and server are speaking the WebSocket protocol.<br>  It is a base64 encoded value that is generated by randomly selecting 16-byte value as a nonce.</li>
<li>The <strong><code>Sec-WebSocket-Version</code></strong> header indicates the version of the WebSocket protocol that the client supports.</li>
<li>The HTTP version must be 1.1 or greater because earlier versions of HTTP do not support the necessary features for upgrading to WebSocket.</li>
<li>Origin header is supplied if the client is a web browser, and CORS issues must also be addressed.</li>
</ul>
</li>
</ol>
<ol start="2">
<li><p><strong>Server handshake response</strong></p>
<p> If the server supports WebSocket, it responds with an upgrade header, establishing a WebSocket connection. </p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">101</span> Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</span><br></pre></td></tr></table></figure>

<ul>
<li><p> <strong><code>Sec-WebSocket-Accept</code></strong> = concatenate the client’s <code>Sec-WebSocket-Key</code> and the string “<code>258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code>“ together (it’s a “<a href="https://en.wikipedia.org/wiki/Magic_string">magic string</a>“), take the SHA-1 hash of the result, and return the base64 encoding of that hash.</p>
<p>The <code>Sec-WebSocket-Key</code> and <code>Sec-WebSocket-Accept</code> headers are part of the security mechanism to ensure that the WebSocket handshake is being conducted correctly and to prevent certain types of attacks.</p>
<ul>
<li>Protocol Upgrade Validation: confirms that the server has correctly understood the WebSocket handshake request(server indeed support WebSocket).</li>
<li>Security and Authentication: This value is used to ensure that the handshake request is valid and is not replayed by a malicious entity.</li>
</ul>
</li>
</ul>
</li>
</ol>
<ol start="3">
<li><p><strong>Exchanging data frames</strong></p>
<p> Websockets have four states: <code>connecting</code>, <code>open</code>, <code>closing</code> and <code>closed</code>. All communication between clients and servers takes place though the use of the websocket <code>frame</code>.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Frame format:</span><br><span class="line"></span><br><span class="line">      0                   1                   2                   3</span><br><span class="line">      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class="line">    +-+-+-+-+-------+-+-------------+-------------------------------+</span><br><span class="line">    |F|R|R|R| opcode|M| Payload len |    Extended payload length    |</span><br><span class="line">    |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |</span><br><span class="line">    |N|V|V|V|       |S|             |   (<span class="keyword">if</span> payload len==126/127)   |</span><br><span class="line">    | |1|2|3|       |K|             |                               |</span><br><span class="line">    +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +</span><br><span class="line">    |     Extended payload length continued, <span class="keyword">if</span> payload len == 127  |</span><br><span class="line">    + - - - - - - - - - - - - - - - +-------------------------------+</span><br><span class="line">    |                               |Masking-key, <span class="keyword">if</span> MASK <span class="built_in">set</span> to 1  |</span><br><span class="line">    +-------------------------------+-------------------------------+</span><br><span class="line">    | Masking-key (continued)       |          Payload Data         |</span><br><span class="line">    +-------------------------------- - - - - - - - - - - - - - - - +</span><br><span class="line">    :                     Payload Data continued ...                :</span><br><span class="line">    + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +</span><br><span class="line">    |                     Payload Data continued ...                |</span><br><span class="line">    +---------------------------------------------------------------+</span><br></pre></td></tr></table></figure>

<p> For more detail about each field: <a href="https://ably.com/topic/websockets#how-do-web-sockets-work">The WebSocket API and protocol explained</a>, <a href="https://datatracker.ietf.org/doc/html/rfc6455#section-5.2">rfc6455</a></p>
<ul>
<li>FIN bit: webSocket protocol makes fragmentation possible via this field, which indicates whether the frame is the final fragment in a WebSocket message.</li>
<li>Opcode: determines how to interpret the payload data.<ul>
<li>0: continuation frame; continues the payload from the previous frame.</li>
<li>1: text frame (UTF-8 text data).</li>
<li>2: binary frame.</li>
<li>8: connection close frame; leads to the connection being terminated.</li>
<li>9: ping frame</li>
<li>10: pong frame</li>
</ul>
</li>
<li>Mask, Masking key, (Extended) payload length, Payload data: Masking is applied from the client to the server to protect against specific security risks associated with WebSocket communication, such as cross-protocol attacks and interference by intermediaries. The server does not need to mask its messages to the client because the client is considered to be in a more secure and controlled environment, and masking would only add unnecessary overhead.</li>
</ul>
</li>
</ol>
<h2 id="Life-Cycle-and-Data-Flow"><a href="#Life-Cycle-and-Data-Flow" class="headerlink" title="Life Cycle and Data Flow"></a>Life Cycle and Data Flow</h2><p>Find a diagram shows how data flows between an websockets application and a remote endpoint. It applies regardless of which side is the server or the client.<br><a href="https://websockets.readthedocs.io/en/stable/topics/design.html">Image From python websockets library doc</a></p>
<p>The WebSocket protocol uses PING/PONG messages to keep connections alive, even when operating behind proxies, firewalls, or load balancers. The server sends a PING message to the client, which responds with a PONG. If the client fails to respond, the server closes the connection.</p>
<img src="/2024/08/15/20240814-websocket-protocol-apiSchemaDesign-authentication/lifecycle.svg" title="Image from python websockets library doc" alt="Image from python websockets library doc">


<p>The following diagram shows how data flows between an application built on top of websockets and a remote endpoint. It applies regardless of which side is the server or the client.</p>
<img src="/2024/08/15/20240814-websocket-protocol-apiSchemaDesign-authentication/protocol.svg" title="Image from python websockets library doc" alt="Image from python websockets library doc">

<h2 id="Websocket-API-Design"><a href="#Websocket-API-Design" class="headerlink" title="Websocket API Design"></a>Websocket API Design</h2><p>The WebSocket protocol enables two-way communication between a client and server over a persistent connection without enforcing a specific message format. Messages can be sent in two primary formats:</p>
<ul>
<li>Text (String) Messages (Opcode 1): These are sent as UTF-8 encoded strings.</li>
<li>Binary (Blob) Messages (Opcode 2): These consist of binary data.</li>
</ul>
<p>Still, there are several API specification formats and standards that can be used for WebSockets, although they are less standardized compared to REST APIs. Here are some of the most commonly used formats:</p>
<ul>
<li><strong>AsyncAPI</strong> is the most comprehensive and purpose-built specification for WebSocket and other asynchronous APIs.</li>
<li><strong>OpenAPI (with Extensions)</strong> is useful if you want to keep WebSocket API documentation consistent with REST API documentation.</li>
<li><strong>WAMP</strong> is more of a protocol but includes its own specifications for WebSocket communication.</li>
<li><strong>RAML</strong> can be extended for WebSockets but is less common for this use case.</li>
<li>Custom Documentation Formats, ex: <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  &quot;type&quot;: &quot;message_type&quot;,</span></span><br><span class="line"><span class="comment">  &quot;payload&quot;: &#123;</span></span><br><span class="line"><span class="comment">      // payload</span></span><br><span class="line"><span class="comment">  &#125;,</span></span><br><span class="line"><span class="comment">  &quot;timestamp&quot;: &quot;2024-08-15T12:34:56Z&quot;,</span></span><br><span class="line"><span class="comment">  &quot;meta&quot;: &#123;</span></span><br><span class="line"><span class="comment">      &quot;source&quot;: &quot;client_id&quot;,</span></span><br><span class="line"><span class="comment">      &quot;destination&quot;: &quot;room_id&quot;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleWebSocketStreamConnectMessage</span><span class="params">(ctx context.Context, msgReq StreamWSMessageRequest)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> msgReq.Type &#123;</span><br><span class="line">  <span class="keyword">case</span> WSMessageTypeChatRoomAction:</span><br><span class="line">    <span class="keyword">var</span> actionPayload ChatRoomActionRequest</span><br><span class="line">    <span class="keyword">if</span> err := json.Unmarshal(msgReq.Payload, &amp;actionPayload); err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// handling action</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> WSMessageTypeChat:</span><br><span class="line">    <span class="keyword">var</span> chatMsgPayload ChatRoomMessageRequest</span><br><span class="line">    <span class="keyword">if</span> err := json.Unmarshal(msgReq.Payload, &amp;chatMsgPayload); err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// handle message</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="WebSocket-Security"><a href="#WebSocket-Security" class="headerlink" title="WebSocket Security"></a>WebSocket Security</h2><h3 id="WSS"><a href="#WSS" class="headerlink" title="WSS"></a>WSS</h3><p>Use secure <code>wss://</code> protocol over the vulnerable <code>ws://</code> transport,  similar to the preference for <code>https://</code> over <code>http://</code>. WSS encrypts WebSocket connections, safeguarding against man-in-the-middle attacks.</p>
<h3 id="Validate-Transported-message"><a href="#Validate-Transported-message" class="headerlink" title="Validate Transported message"></a>Validate Transported message</h3><p>Validate client message before processing it to avoid SQL injection, and validate server message to avoid unexpected errors.</p>
<h3 id="Authentication-Authorization"><a href="#Authentication-Authorization" class="headerlink" title="Authentication/Authorization"></a>Authentication/Authorization</h3><ol>
<li><p>Send Access Token in the Query Parameter</p>
<p> Unlike HTTP, which mandates authentication credentials for each request, WebSockets establish a persistent connection. Authentication occurs during the initial HTTP handshake before the connection is upgraded to WebSocket, allowing subsequent communication without repeated credential checks.</p>
   <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wss://website.com?token=your_token_here</span><br></pre></td></tr></table></figure>
<p> If the token is valid, proceed with the WebSocket upgrade. Otherwise, send a standard 401 Unauthorized response and close the underlying socket.</p>
</li>
<li><p>Send Access Token Over WebSocket<br> Another way to authenticate a WebSocket connection is to send the access token in the first message after establishing the connection. The server should validate the token before allowing any client actions.<br> However, this approach has drawbacks:</p>
<ul>
<li><p>Increased Complexity: Implementing a custom stateful protocol adds complexity, requiring session management, synchronization across scales, and addressing inconsistencies. If issues arise, it could block logins or introduce security vulnerabilities.</p>
</li>
<li><p>Vulnerability to DoS Attacks: Attackers might open multiple WebSocket connections without authenticating, tying up server resources. This requires strict timeouts to prevent server overload, adding more complexity compared to HTTP-based methods.</p>
</li>
</ul>
</li>
</ol>
<h2 id="Graceful-Degradation"><a href="#Graceful-Degradation" class="headerlink" title="Graceful Degradation"></a><strong>Graceful Degradation</strong></h2><ul>
<li><strong>Fallback Mechanisms:</strong> In scenarios where maintaining a WebSocket connection is difficult (e.g., due to network issues or server overload) or not supported by client devices (<a href="https://caniuse.com/websockets">Can I use WebSocket?</a>), applications often implement fallback mechanisms like HTTP long polling or Server-Sent Events (SSE). These alternatives can help maintain communication, albeit less efficiently, when WebSockets are not viable.</li>
</ul>
<h2 id="Sec-WebSocket-Extensions"><a href="#Sec-WebSocket-Extensions" class="headerlink" title="Sec-WebSocket-Extensions"></a>Sec-WebSocket-Extensions</h2><p>check <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism">Protocol upgrade mechanism</a>for more detail</p>
<h2 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h2><ul>
<li><a href="https://ably.com/topic/websockets">The WebSocket API and protocol explained</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers">Writing WebSocket servers</a></li>
<li><a href="https://websockets.readthedocs.io/en/stable/topics/design.html">Design</a></li>
<li><a href="https://datatracker.ietf.org/doc/html/rfc6455#section-5.2">rfc6455</a></li>
<li><a href="https://noio-ws.readthedocs.io/en/latest/overview_of_websockets.html">overview_of_websockets</a></li>
<li><a href="https://dev.to/idanarye/are-there-any-api-specification-formats-for-websockets-2mkk">Are there any API specification formats for WebSockets?</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications">Writing_WebSocket_client_applications</a></li>
<li><a href="https://ably.com/blog/websocket-authentication">websocket-authentication</a></li>
<li><a href="https://stackoverflow.com/questions/67487034/how-to-do-authentication-over-web-sockets">how-to-do-authentication-over-web-sockets</a></li>
<li><a href="https://pages.ably.com/hubfs/the-websocket-handbook.pdf">the-websocket-handbook</a></li>
<li><a href="https://www.geeksforgeeks.org/websockets-in-microservices-architecture/">websockets-in-microservices-architecture</a></li>
<li><a href="https://devcenter.heroku.com/articles/websocket-security">WebSocket Security</a></li>
<li><a href="https://stackoverflow.com/questions/31564432/websocket-security">Websocket Security</a></li>
<li><a href="https://portswigger.net/web-security/web-cache-poisoning">web cache poisoning</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism">Protocol upgrade mechanism</a></li>
<li><a href="https://caniuse.com/websockets">Can I use WebSocket?</a></li>
</ul>
]]></content>
      <categories>
        <category>WebSocket</category>
      </categories>
      <tags>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>WebSocket Usage Pattern in Microservices Architecture and How to Horizontal Scaling</title>
    <url>/2024/08/20/20240820-websocket-architecture-and-scaling/</url>
    <content><![CDATA[<p>To Be Continue…</p>
]]></content>
      <categories>
        <category>WebSocket</category>
      </categories>
      <tags>
        <tag>WebSocket</tag>
        <tag>Microservices</tag>
        <tag>System Design</tag>
      </tags>
  </entry>
</search>
